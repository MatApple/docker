/* Generated by Cython 0.18 on Sat Feb 16 09:29:56 2013 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__msgpack___packer
#define __PYX_HAVE_API__msgpack___packer
#include "string.h"
#include "stdio.h"
#include "pythread.h"
#include "stdlib.h"
#include "limits.h"
#include "pack.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "_packer.pyx",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_7msgpack_7_packer_Packer;
struct __pyx_opt_args_7msgpack_7_packer_6Packer__pack;

/* "msgpack/_packer.pyx":102
 *         free(self.pk.buf);
 * 
 *     cdef int _pack(self, object o, int nest_limit=DEFAULT_RECURSE_LIMIT) except -1:             # <<<<<<<<<<<<<<
 *         cdef long long llval
 *         cdef unsigned long long ullval
 */

#line 102 "msgpack/_packer.pyx"
struct __pyx_opt_args_7msgpack_7_packer_6Packer__pack {

#line 102 "msgpack/_packer.pyx"
  int __pyx_n;

#line 102 "msgpack/_packer.pyx"
  int nest_limit;

#line 102 "msgpack/_packer.pyx"
};

/* "msgpack/_packer.pyx":41
 * 
 * 
 * cdef class Packer(object):             # <<<<<<<<<<<<<<
 *     """MessagePack Packer
 * 
 */

#line 41 "msgpack/_packer.pyx"
struct __pyx_obj_7msgpack_7_packer_Packer {

#line 41 "msgpack/_packer.pyx"
  PyObject_HEAD

#line 41 "msgpack/_packer.pyx"
  struct __pyx_vtabstruct_7msgpack_7_packer_Packer *__pyx_vtab;

#line 41 "msgpack/_packer.pyx"
  struct msgpack_packer pk;

#line 41 "msgpack/_packer.pyx"
  PyObject *_default;

#line 41 "msgpack/_packer.pyx"
  PyObject *_bencoding;

#line 41 "msgpack/_packer.pyx"
  PyObject *_berrors;

#line 41 "msgpack/_packer.pyx"
  char *encoding;

#line 41 "msgpack/_packer.pyx"
  char *unicode_errors;

#line 41 "msgpack/_packer.pyx"
  PyBoolObject *use_float;

#line 41 "msgpack/_packer.pyx"
  int autoreset;

#line 41 "msgpack/_packer.pyx"
};

#line 41 "msgpack/_packer.pyx"


#line 41 "msgpack/_packer.pyx"


#line 41 "msgpack/_packer.pyx"


#line 41 "msgpack/_packer.pyx"
struct __pyx_vtabstruct_7msgpack_7_packer_Packer {

#line 41 "msgpack/_packer.pyx"
  int (*_pack)(struct __pyx_obj_7msgpack_7_packer_Packer *, PyObject *, struct __pyx_opt_args_7msgpack_7_packer_6Packer__pack *__pyx_optional_args);

#line 41 "msgpack/_packer.pyx"
  PyObject *(*pack)(struct __pyx_obj_7msgpack_7_packer_Packer *, PyObject *, int __pyx_skip_dispatch);

#line 41 "msgpack/_packer.pyx"
};

#line 41 "msgpack/_packer.pyx"
static struct __pyx_vtabstruct_7msgpack_7_packer_Packer *__pyx_vtabptr_7msgpack_7_packer_Packer;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name);

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.limits' */

/* Module declarations from 'msgpack._packer' */
static PyTypeObject *__pyx_ptype_7msgpack_7_packer_Packer = 0;
static int __pyx_v_7msgpack_7_packer_DEFAULT_RECURSE_LIMIT;
#define __Pyx_MODULE_NAME "msgpack._packer"
int __pyx_module_is_main_msgpack___packer = 0;

/* Implementation of 'msgpack._packer' */
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_TypeError;
static int __pyx_pf_7msgpack_7_packer_6Packer___cinit__(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self); /* proto */
static int __pyx_pf_7msgpack_7_packer_6Packer_2__init__(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self, PyObject *__pyx_v_default, PyObject *__pyx_v_encoding, PyObject *__pyx_v_unicode_errors, PyObject *__pyx_v_use_single_float, int __pyx_v_autoreset); /* proto */
static void __pyx_pf_7msgpack_7_packer_6Packer_4__dealloc__(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_7_packer_6Packer_6pack(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_7msgpack_7_packer_6Packer_8pack_array_header(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_7msgpack_7_packer_6Packer_10pack_map_header(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self, size_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_7msgpack_7_packer_6Packer_12pack_map_pairs(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self, PyObject *__pyx_v_pairs); /* proto */
static PyObject *__pyx_pf_7msgpack_7_packer_6Packer_14reset(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_7_packer_6Packer_16bytes(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7msgpack_7_packer_pack(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_o, PyObject *__pyx_v_stream, PyObject *__pyx_v_default, PyObject *__pyx_v_encoding, PyObject *__pyx_v_unicode_errors); /* proto */
static PyObject *__pyx_pf_7msgpack_7_packer_2packb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_o, PyObject *__pyx_v_default, PyObject *__pyx_v_encoding, PyObject *__pyx_v_unicode_errors, PyObject *__pyx_v_use_single_float); /* proto */
static char __pyx_k_1[] = "Unable to allocate internal buffer.";
static char __pyx_k_3[] = "utf-8";
static char __pyx_k_5[] = "default must be a callable.";
static char __pyx_k_10[] = "recursion limit exceeded.";
static char __pyx_k_12[] = "Can't encode unicode string: no encoding is specified";
static char __pyx_k_14[] = "can't serialize %r";
static char __pyx_k_16[] = "msgpack.exceptions";
static char __pyx_k_19[] = "/Users/inada-n/work/msgpack-python/msgpack/_packer.pyx";
static char __pyx_k_20[] = "msgpack._packer";
static char __pyx_k__o[] = "o";
static char __pyx_k__pack[] = "pack";
static char __pyx_k__ascii[] = "ascii";
static char __pyx_k__items[] = "items";
static char __pyx_k__packb[] = "packb";
static char __pyx_k__write[] = "write";
static char __pyx_k__encode[] = "encode";
static char __pyx_k__packer[] = "packer";
static char __pyx_k__stream[] = "stream";
static char __pyx_k__strict[] = "strict";
static char __pyx_k__default[] = "default";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__encoding[] = "encoding";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k__autoreset[] = "autoreset";
static char __pyx_k__iteritems[] = "iteritems";
static char __pyx_k__MemoryError[] = "MemoryError";
static char __pyx_k__PackValueError[] = "PackValueError";
static char __pyx_k__unicode_errors[] = "unicode_errors";
static char __pyx_k__use_single_float[] = "use_single_float";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_kp_s_12;
static PyObject *__pyx_kp_s_14;
static PyObject *__pyx_n_s_16;
static PyObject *__pyx_kp_s_19;
static PyObject *__pyx_n_s_20;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_n_s__MemoryError;
static PyObject *__pyx_n_s__PackValueError;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__ascii;
static PyObject *__pyx_n_s__autoreset;
static PyObject *__pyx_n_s__default;
static PyObject *__pyx_n_s__encode;
static PyObject *__pyx_n_s__encoding;
static PyObject *__pyx_n_s__items;
static PyObject *__pyx_n_s__iteritems;
static PyObject *__pyx_n_s__o;
static PyObject *__pyx_n_s__pack;
static PyObject *__pyx_n_s__packb;
static PyObject *__pyx_n_s__packer;
static PyObject *__pyx_n_s__stream;
static PyObject *__pyx_n_s__strict;
static PyObject *__pyx_n_s__unicode_errors;
static PyObject *__pyx_n_s__use_single_float;
static PyObject *__pyx_n_s__write;
static PyObject *__pyx_int_0;
static PyObject *__pyx_k_4;
static int __pyx_k_9;
static PyObject *__pyx_k_15;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_7;
static PyObject *__pyx_k_tuple_8;
static PyObject *__pyx_k_tuple_11;
static PyObject *__pyx_k_tuple_13;
static PyObject *__pyx_k_tuple_17;
static PyObject *__pyx_k_tuple_21;
static PyObject *__pyx_k_codeobj_18;
static PyObject *__pyx_k_codeobj_22;

/* Python wrapper */
static int __pyx_pw_7msgpack_7_packer_6Packer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7msgpack_7_packer_6Packer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7msgpack_7_packer_6Packer___cinit__(((struct __pyx_obj_7msgpack_7_packer_Packer *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msgpack/_packer.pyx":69
 *     cdef bint autoreset
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         cdef int buf_size = 1024*1024
 *         self.pk.buf = <char*> malloc(buf_size);
 */

#line 69 "msgpack/_packer.pyx"


#line 69 "msgpack/_packer.pyx"
static int __pyx_pf_7msgpack_7_packer_6Packer___cinit__(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self) {
  int __pyx_v_buf_size
#line 69 "msgpack/_packer.pyx"
;

#line 69 "msgpack/_packer.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 69 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "msgpack/_packer.pyx":70
 * 
 *     def __cinit__(self):
 *         cdef int buf_size = 1024*1024             # <<<<<<<<<<<<<<
 *         self.pk.buf = <char*> malloc(buf_size);
 *         if self.pk.buf == NULL:
 */

#line 70 "msgpack/_packer.pyx"
  __pyx_v_buf_size = 1048576;

  /* "msgpack/_packer.pyx":71
 *     def __cinit__(self):
 *         cdef int buf_size = 1024*1024
 *         self.pk.buf = <char*> malloc(buf_size);             # <<<<<<<<<<<<<<
 *         if self.pk.buf == NULL:
 *             raise MemoryError("Unable to allocate internal buffer.")
 */

#line 71 "msgpack/_packer.pyx"
  __pyx_v_self->pk.buf = ((char *)malloc(__pyx_v_buf_size));

  /* "msgpack/_packer.pyx":72
 *         cdef int buf_size = 1024*1024
 *         self.pk.buf = <char*> malloc(buf_size);
 *         if self.pk.buf == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Unable to allocate internal buffer.")
 *         self.pk.buf_size = buf_size
 */

#line 72 "msgpack/_packer.pyx"
  __pyx_t_1 = (__pyx_v_self->pk.buf == NULL);

#line 72 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":73
 *         self.pk.buf = <char*> malloc(buf_size);
 *         if self.pk.buf == NULL:
 *             raise MemoryError("Unable to allocate internal buffer.")             # <<<<<<<<<<<<<<
 *         self.pk.buf_size = buf_size
 *         self.pk.length = 0
 */

#line 73 "msgpack/_packer.pyx"
    __pyx_t_2 = PyObject_Call(__pyx_builtin_MemoryError, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 73 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 73 "msgpack/_packer.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 73 "msgpack/_packer.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 73 "msgpack/_packer.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 73 "msgpack/_packer.pyx"
    goto __pyx_L3;

#line 73 "msgpack/_packer.pyx"
  }

#line 73 "msgpack/_packer.pyx"
  __pyx_L3:;

  /* "msgpack/_packer.pyx":74
 *         if self.pk.buf == NULL:
 *             raise MemoryError("Unable to allocate internal buffer.")
 *         self.pk.buf_size = buf_size             # <<<<<<<<<<<<<<
 *         self.pk.length = 0
 * 
 */

#line 74 "msgpack/_packer.pyx"
  __pyx_v_self->pk.buf_size = __pyx_v_buf_size;

  /* "msgpack/_packer.pyx":75
 *             raise MemoryError("Unable to allocate internal buffer.")
 *         self.pk.buf_size = buf_size
 *         self.pk.length = 0             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, default=None, encoding='utf-8', unicode_errors='strict', use_single_float=False, bint autoreset=1):
 */

#line 75 "msgpack/_packer.pyx"
  __pyx_v_self->pk.length = 0;

#line 75 "msgpack/_packer.pyx"


#line 75 "msgpack/_packer.pyx"
  __pyx_r = 0;

#line 75 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 75 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 75 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 75 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.Packer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 75 "msgpack/_packer.pyx"
  __pyx_r = -1;

#line 75 "msgpack/_packer.pyx"
  __pyx_L0:;

#line 75 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 75 "msgpack/_packer.pyx"
  return __pyx_r;

#line 75 "msgpack/_packer.pyx"
}

#line 75 "msgpack/_packer.pyx"


#line 75 "msgpack/_packer.pyx"
/* Python wrapper */

#line 75 "msgpack/_packer.pyx"
static int __pyx_pw_7msgpack_7_packer_6Packer_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 75 "msgpack/_packer.pyx"
static int __pyx_pw_7msgpack_7_packer_6Packer_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_default = 0
#line 75 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_encoding = 0
#line 75 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_unicode_errors = 0
#line 75 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_use_single_float = 0
#line 75 "msgpack/_packer.pyx"
;
  int __pyx_v_autoreset
#line 75 "msgpack/_packer.pyx"
;

#line 75 "msgpack/_packer.pyx"
  int __pyx_r;

#line 75 "msgpack/_packer.pyx"
  __Pyx_RefNannyDeclarations

#line 75 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 75 "msgpack/_packer.pyx"
  {

#line 75 "msgpack/_packer.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__default,&__pyx_n_s__encoding,&__pyx_n_s__unicode_errors,&__pyx_n_s__use_single_float,&__pyx_n_s__autoreset,0};

#line 75 "msgpack/_packer.pyx"
    PyObject* values[5] = {0,0,0,0,0};

    /* "msgpack/_packer.pyx":77
 *         self.pk.length = 0
 * 
 *     def __init__(self, default=None, encoding='utf-8', unicode_errors='strict', use_single_float=False, bint autoreset=1):             # <<<<<<<<<<<<<<
 *         self.use_float = use_single_float
 *         self.autoreset = autoreset
 */

#line 77 "msgpack/_packer.pyx"
    values[0] = ((PyObject *)Py_None);

#line 77 "msgpack/_packer.pyx"
    values[1] = ((PyObject *)__pyx_kp_s_3);

#line 77 "msgpack/_packer.pyx"
    values[2] = ((PyObject *)__pyx_n_s__strict);

#line 77 "msgpack/_packer.pyx"
    values[3] = __pyx_k_4;

#line 77 "msgpack/_packer.pyx"
    if (unlikely(__pyx_kwds)) {

#line 77 "msgpack/_packer.pyx"
      Py_ssize_t kw_args;

#line 77 "msgpack/_packer.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 77 "msgpack/_packer.pyx"
      switch (pos_args) {
        case  5: 
#line 77 "msgpack/_packer.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 77 "msgpack/_packer.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 77 "msgpack/_packer.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 77 "msgpack/_packer.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 77 "msgpack/_packer.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 77 "msgpack/_packer.pyx"
        case  0: break;
        default: 
#line 77 "msgpack/_packer.pyx"
goto __pyx_L5_argtuple_error;

#line 77 "msgpack/_packer.pyx"
      }

#line 77 "msgpack/_packer.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 77 "msgpack/_packer.pyx"
      switch (pos_args) {

#line 77 "msgpack/_packer.pyx"
        case  0:

#line 77 "msgpack/_packer.pyx"
        if (kw_args > 0) {

#line 77 "msgpack/_packer.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__default);

#line 77 "msgpack/_packer.pyx"
          if (value) { values[0] = value; kw_args--; }

#line 77 "msgpack/_packer.pyx"
        }

#line 77 "msgpack/_packer.pyx"
        case  1:

#line 77 "msgpack/_packer.pyx"
        if (kw_args > 0) {

#line 77 "msgpack/_packer.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__encoding);

#line 77 "msgpack/_packer.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 77 "msgpack/_packer.pyx"
        }

#line 77 "msgpack/_packer.pyx"
        case  2:

#line 77 "msgpack/_packer.pyx"
        if (kw_args > 0) {

#line 77 "msgpack/_packer.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__unicode_errors);

#line 77 "msgpack/_packer.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 77 "msgpack/_packer.pyx"
        }

#line 77 "msgpack/_packer.pyx"
        case  3:

#line 77 "msgpack/_packer.pyx"
        if (kw_args > 0) {

#line 77 "msgpack/_packer.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__use_single_float);

#line 77 "msgpack/_packer.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 77 "msgpack/_packer.pyx"
        }

#line 77 "msgpack/_packer.pyx"
        case  4:

#line 77 "msgpack/_packer.pyx"
        if (kw_args > 0) {

#line 77 "msgpack/_packer.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__autoreset);

#line 77 "msgpack/_packer.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 77 "msgpack/_packer.pyx"
        }

#line 77 "msgpack/_packer.pyx"
      }

#line 77 "msgpack/_packer.pyx"
      if (unlikely(kw_args > 0)) {

#line 77 "msgpack/_packer.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 77 "msgpack/_packer.pyx"
      }

#line 77 "msgpack/_packer.pyx"
    } else {

#line 77 "msgpack/_packer.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: 
#line 77 "msgpack/_packer.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 77 "msgpack/_packer.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 77 "msgpack/_packer.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 77 "msgpack/_packer.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 77 "msgpack/_packer.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: 
#line 77 "msgpack/_packer.pyx"
break;
        default: 
#line 77 "msgpack/_packer.pyx"
goto __pyx_L5_argtuple_error;

#line 77 "msgpack/_packer.pyx"
      }

#line 77 "msgpack/_packer.pyx"
    }

#line 77 "msgpack/_packer.pyx"
    __pyx_v_default = values[0];

#line 77 "msgpack/_packer.pyx"
    __pyx_v_encoding = values[1];

#line 77 "msgpack/_packer.pyx"
    __pyx_v_unicode_errors = values[2];

#line 77 "msgpack/_packer.pyx"
    __pyx_v_use_single_float = values[3];

#line 77 "msgpack/_packer.pyx"
    if (values[4]) {

#line 77 "msgpack/_packer.pyx"
      __pyx_v_autoreset = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_autoreset == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 77 "msgpack/_packer.pyx"
    } else {

#line 77 "msgpack/_packer.pyx"
      __pyx_v_autoreset = ((int)1);

#line 77 "msgpack/_packer.pyx"
    }

#line 77 "msgpack/_packer.pyx"
  }

#line 77 "msgpack/_packer.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 77 "msgpack/_packer.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 77 "msgpack/_packer.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 77 "msgpack/_packer.pyx"
  __pyx_L3_error:;

#line 77 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.Packer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 77 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 77 "msgpack/_packer.pyx"
  return -1;

#line 77 "msgpack/_packer.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 77 "msgpack/_packer.pyx"
__pyx_pf_7msgpack_7_packer_6Packer_2__init__(((struct __pyx_obj_7msgpack_7_packer_Packer *)__pyx_v_self), __pyx_v_default, __pyx_v_encoding, __pyx_v_unicode_errors, __pyx_v_use_single_float, __pyx_v_autoreset);

#line 77 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 77 "msgpack/_packer.pyx"
  return __pyx_r;

#line 77 "msgpack/_packer.pyx"
}

#line 77 "msgpack/_packer.pyx"


#line 77 "msgpack/_packer.pyx"
static int __pyx_pf_7msgpack_7_packer_6Packer_2__init__(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self, PyObject *__pyx_v_default, PyObject *__pyx_v_encoding, PyObject *__pyx_v_unicode_errors, PyObject *__pyx_v_use_single_float, int __pyx_v_autoreset) {

#line 77 "msgpack/_packer.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 77 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "msgpack/_packer.pyx":78
 * 
 *     def __init__(self, default=None, encoding='utf-8', unicode_errors='strict', use_single_float=False, bint autoreset=1):
 *         self.use_float = use_single_float             # <<<<<<<<<<<<<<
 *         self.autoreset = autoreset
 *         if default is not None:
 */

#line 78 "msgpack/_packer.pyx"
  if (!(likely(((__pyx_v_use_single_float) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_use_single_float, __pyx_ptype_7cpython_4bool_bool))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "msgpack/_packer.pyx"
  __Pyx_INCREF(__pyx_v_use_single_float);

#line 78 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(__pyx_v_use_single_float);

#line 78 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_v_self->use_float);

#line 78 "msgpack/_packer.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_v_self->use_float));

#line 78 "msgpack/_packer.pyx"
  __pyx_v_self->use_float = ((PyBoolObject *)__pyx_v_use_single_float);

  /* "msgpack/_packer.pyx":79
 *     def __init__(self, default=None, encoding='utf-8', unicode_errors='strict', use_single_float=False, bint autoreset=1):
 *         self.use_float = use_single_float
 *         self.autoreset = autoreset             # <<<<<<<<<<<<<<
 *         if default is not None:
 *             if not PyCallable_Check(default):
 */

#line 79 "msgpack/_packer.pyx"
  __pyx_v_self->autoreset = __pyx_v_autoreset;

  /* "msgpack/_packer.pyx":80
 *         self.use_float = use_single_float
 *         self.autoreset = autoreset
 *         if default is not None:             # <<<<<<<<<<<<<<
 *             if not PyCallable_Check(default):
 *                 raise TypeError("default must be a callable.")
 */

#line 80 "msgpack/_packer.pyx"
  __pyx_t_1 = (__pyx_v_default != Py_None);

#line 80 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":81
 *         self.autoreset = autoreset
 *         if default is not None:
 *             if not PyCallable_Check(default):             # <<<<<<<<<<<<<<
 *                 raise TypeError("default must be a callable.")
 *         self._default = default
 */

#line 81 "msgpack/_packer.pyx"
    __pyx_t_1 = (!PyCallable_Check(__pyx_v_default));

#line 81 "msgpack/_packer.pyx"
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":82
 *         if default is not None:
 *             if not PyCallable_Check(default):
 *                 raise TypeError("default must be a callable.")             # <<<<<<<<<<<<<<
 *         self._default = default
 *         if encoding is None:
 */

#line 82 "msgpack/_packer.pyx"
      __pyx_t_2 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 82 "msgpack/_packer.pyx"
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 82 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 82 "msgpack/_packer.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "msgpack/_packer.pyx"
      goto __pyx_L4;

#line 82 "msgpack/_packer.pyx"
    }

#line 82 "msgpack/_packer.pyx"
    __pyx_L4:;

#line 82 "msgpack/_packer.pyx"
    goto __pyx_L3;

#line 82 "msgpack/_packer.pyx"
  }

#line 82 "msgpack/_packer.pyx"
  __pyx_L3:;

  /* "msgpack/_packer.pyx":83
 *             if not PyCallable_Check(default):
 *                 raise TypeError("default must be a callable.")
 *         self._default = default             # <<<<<<<<<<<<<<
 *         if encoding is None:
 *             self.encoding = NULL
 */

#line 83 "msgpack/_packer.pyx"
  __Pyx_INCREF(__pyx_v_default);

#line 83 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(__pyx_v_default);

#line 83 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_v_self->_default);

#line 83 "msgpack/_packer.pyx"
  __Pyx_DECREF(__pyx_v_self->_default);

#line 83 "msgpack/_packer.pyx"
  __pyx_v_self->_default = __pyx_v_default;

  /* "msgpack/_packer.pyx":84
 *                 raise TypeError("default must be a callable.")
 *         self._default = default
 *         if encoding is None:             # <<<<<<<<<<<<<<
 *             self.encoding = NULL
 *             self.unicode_errors = NULL
 */

#line 84 "msgpack/_packer.pyx"
  __pyx_t_1 = (__pyx_v_encoding == Py_None);

#line 84 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":85
 *         self._default = default
 *         if encoding is None:
 *             self.encoding = NULL             # <<<<<<<<<<<<<<
 *             self.unicode_errors = NULL
 *         else:
 */

#line 85 "msgpack/_packer.pyx"
    __pyx_v_self->encoding = NULL;

    /* "msgpack/_packer.pyx":86
 *         if encoding is None:
 *             self.encoding = NULL
 *             self.unicode_errors = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             if isinstance(encoding, unicode):
 */

#line 86 "msgpack/_packer.pyx"
    __pyx_v_self->unicode_errors = NULL;

#line 86 "msgpack/_packer.pyx"
    goto __pyx_L5;

#line 86 "msgpack/_packer.pyx"
  }

#line 86 "msgpack/_packer.pyx"
  /*else*/ {

    /* "msgpack/_packer.pyx":88
 *             self.unicode_errors = NULL
 *         else:
 *             if isinstance(encoding, unicode):             # <<<<<<<<<<<<<<
 *                 self._bencoding = encoding.encode('ascii')
 *             else:
 */

#line 88 "msgpack/_packer.pyx"
    __pyx_t_1 = PyUnicode_Check(__pyx_v_encoding); 

#line 88 "msgpack/_packer.pyx"
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":89
 *         else:
 *             if isinstance(encoding, unicode):
 *                 self._bencoding = encoding.encode('ascii')             # <<<<<<<<<<<<<<
 *             else:
 *                 self._bencoding = encoding
 */

#line 89 "msgpack/_packer.pyx"
      __pyx_t_2 = PyObject_GetAttr(__pyx_v_encoding, __pyx_n_s__encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 89 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 89 "msgpack/_packer.pyx"
      __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_7), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 89 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 89 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 89 "msgpack/_packer.pyx"
      __Pyx_GIVEREF(__pyx_t_3);

#line 89 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_v_self->_bencoding);

#line 89 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_v_self->_bencoding);

#line 89 "msgpack/_packer.pyx"
      __pyx_v_self->_bencoding = __pyx_t_3;

#line 89 "msgpack/_packer.pyx"
      __pyx_t_3 = 0;

#line 89 "msgpack/_packer.pyx"
      goto __pyx_L6;

#line 89 "msgpack/_packer.pyx"
    }

#line 89 "msgpack/_packer.pyx"
    /*else*/ {

      /* "msgpack/_packer.pyx":91
 *                 self._bencoding = encoding.encode('ascii')
 *             else:
 *                 self._bencoding = encoding             # <<<<<<<<<<<<<<
 *             self.encoding = PyBytes_AsString(self._bencoding)
 *             if isinstance(unicode_errors, unicode):
 */

#line 91 "msgpack/_packer.pyx"
      __Pyx_INCREF(__pyx_v_encoding);

#line 91 "msgpack/_packer.pyx"
      __Pyx_GIVEREF(__pyx_v_encoding);

#line 91 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_v_self->_bencoding);

#line 91 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_v_self->_bencoding);

#line 91 "msgpack/_packer.pyx"
      __pyx_v_self->_bencoding = __pyx_v_encoding;

#line 91 "msgpack/_packer.pyx"
    }

#line 91 "msgpack/_packer.pyx"
    __pyx_L6:;

    /* "msgpack/_packer.pyx":92
 *             else:
 *                 self._bencoding = encoding
 *             self.encoding = PyBytes_AsString(self._bencoding)             # <<<<<<<<<<<<<<
 *             if isinstance(unicode_errors, unicode):
 *                 self._berrors = unicode_errors.encode('ascii')
 */

#line 92 "msgpack/_packer.pyx"
    __pyx_t_3 = __pyx_v_self->_bencoding;

#line 92 "msgpack/_packer.pyx"
    __Pyx_INCREF(__pyx_t_3);

#line 92 "msgpack/_packer.pyx"
    __pyx_t_4 = PyBytes_AsString(__pyx_t_3); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "msgpack/_packer.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 92 "msgpack/_packer.pyx"
    __pyx_v_self->encoding = __pyx_t_4;

    /* "msgpack/_packer.pyx":93
 *                 self._bencoding = encoding
 *             self.encoding = PyBytes_AsString(self._bencoding)
 *             if isinstance(unicode_errors, unicode):             # <<<<<<<<<<<<<<
 *                 self._berrors = unicode_errors.encode('ascii')
 *             else:
 */

#line 93 "msgpack/_packer.pyx"
    __pyx_t_1 = PyUnicode_Check(__pyx_v_unicode_errors); 

#line 93 "msgpack/_packer.pyx"
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":94
 *             self.encoding = PyBytes_AsString(self._bencoding)
 *             if isinstance(unicode_errors, unicode):
 *                 self._berrors = unicode_errors.encode('ascii')             # <<<<<<<<<<<<<<
 *             else:
 *                 self._berrors = unicode_errors
 */

#line 94 "msgpack/_packer.pyx"
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_unicode_errors, __pyx_n_s__encode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 94 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 94 "msgpack/_packer.pyx"
      __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_8), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 94 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 94 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 94 "msgpack/_packer.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 94 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_v_self->_berrors);

#line 94 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_v_self->_berrors);

#line 94 "msgpack/_packer.pyx"
      __pyx_v_self->_berrors = __pyx_t_2;

#line 94 "msgpack/_packer.pyx"
      __pyx_t_2 = 0;

#line 94 "msgpack/_packer.pyx"
      goto __pyx_L7;

#line 94 "msgpack/_packer.pyx"
    }

#line 94 "msgpack/_packer.pyx"
    /*else*/ {

      /* "msgpack/_packer.pyx":96
 *                 self._berrors = unicode_errors.encode('ascii')
 *             else:
 *                 self._berrors = unicode_errors             # <<<<<<<<<<<<<<
 *             self.unicode_errors = PyBytes_AsString(self._berrors)
 * 
 */

#line 96 "msgpack/_packer.pyx"
      __Pyx_INCREF(__pyx_v_unicode_errors);

#line 96 "msgpack/_packer.pyx"
      __Pyx_GIVEREF(__pyx_v_unicode_errors);

#line 96 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_v_self->_berrors);

#line 96 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_v_self->_berrors);

#line 96 "msgpack/_packer.pyx"
      __pyx_v_self->_berrors = __pyx_v_unicode_errors;

#line 96 "msgpack/_packer.pyx"
    }

#line 96 "msgpack/_packer.pyx"
    __pyx_L7:;

    /* "msgpack/_packer.pyx":97
 *             else:
 *                 self._berrors = unicode_errors
 *             self.unicode_errors = PyBytes_AsString(self._berrors)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 97 "msgpack/_packer.pyx"
    __pyx_t_2 = __pyx_v_self->_berrors;

#line 97 "msgpack/_packer.pyx"
    __Pyx_INCREF(__pyx_t_2);

#line 97 "msgpack/_packer.pyx"
    __pyx_t_4 = PyBytes_AsString(__pyx_t_2); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "msgpack/_packer.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 97 "msgpack/_packer.pyx"
    __pyx_v_self->unicode_errors = __pyx_t_4;

#line 97 "msgpack/_packer.pyx"
  }

#line 97 "msgpack/_packer.pyx"
  __pyx_L5:;

#line 97 "msgpack/_packer.pyx"


#line 97 "msgpack/_packer.pyx"
  __pyx_r = 0;

#line 97 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 97 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 97 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 97 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 97 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.Packer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 97 "msgpack/_packer.pyx"
  __pyx_r = -1;

#line 97 "msgpack/_packer.pyx"
  __pyx_L0:;

#line 97 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 97 "msgpack/_packer.pyx"
  return __pyx_r;

#line 97 "msgpack/_packer.pyx"
}

#line 97 "msgpack/_packer.pyx"


#line 97 "msgpack/_packer.pyx"
/* Python wrapper */

#line 97 "msgpack/_packer.pyx"
static void __pyx_pw_7msgpack_7_packer_6Packer_5__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 97 "msgpack/_packer.pyx"
static void __pyx_pw_7msgpack_7_packer_6Packer_5__dealloc__(PyObject *__pyx_v_self) {

#line 97 "msgpack/_packer.pyx"
  __Pyx_RefNannyDeclarations

#line 97 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 97 "msgpack/_packer.pyx"
  __pyx_pf_7msgpack_7_packer_6Packer_4__dealloc__(((struct __pyx_obj_7msgpack_7_packer_Packer *)__pyx_v_self));

#line 97 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 97 "msgpack/_packer.pyx"
}

/* "msgpack/_packer.pyx":99
 *             self.unicode_errors = PyBytes_AsString(self._berrors)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.pk.buf);
 * 
 */

#line 99 "msgpack/_packer.pyx"


#line 99 "msgpack/_packer.pyx"
static void __pyx_pf_7msgpack_7_packer_6Packer_4__dealloc__(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations

#line 99 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "msgpack/_packer.pyx":100
 * 
 *     def __dealloc__(self):
 *         free(self.pk.buf);             # <<<<<<<<<<<<<<
 * 
 *     cdef int _pack(self, object o, int nest_limit=DEFAULT_RECURSE_LIMIT) except -1:
 */

#line 100 "msgpack/_packer.pyx"
  free(__pyx_v_self->pk.buf);

#line 100 "msgpack/_packer.pyx"


#line 100 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 100 "msgpack/_packer.pyx"
}

/* "msgpack/_packer.pyx":102
 *         free(self.pk.buf);
 * 
 *     cdef int _pack(self, object o, int nest_limit=DEFAULT_RECURSE_LIMIT) except -1:             # <<<<<<<<<<<<<<
 *         cdef long long llval
 *         cdef unsigned long long ullval
 */

#line 102 "msgpack/_packer.pyx"


#line 102 "msgpack/_packer.pyx"
static int __pyx_f_7msgpack_7_packer_6Packer__pack(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self, PyObject *__pyx_v_o, struct __pyx_opt_args_7msgpack_7_packer_6Packer__pack *__pyx_optional_args) {

#line 102 "msgpack/_packer.pyx"
  int __pyx_v_nest_limit = __pyx_k_9;
  PY_LONG_LONG __pyx_v_llval
#line 102 "msgpack/_packer.pyx"
;
  unsigned PY_LONG_LONG __pyx_v_ullval
#line 102 "msgpack/_packer.pyx"
;
  long __pyx_v_longval
#line 102 "msgpack/_packer.pyx"
;
  float __pyx_v_fval
#line 102 "msgpack/_packer.pyx"
;
  double __pyx_v_dval
#line 102 "msgpack/_packer.pyx"
;
  char *__pyx_v_rawval
#line 102 "msgpack/_packer.pyx"
;
  int __pyx_v_ret
#line 102 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_d = 0
#line 102 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_k = NULL
#line 102 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_v = NULL
#line 102 "msgpack/_packer.pyx"
;

#line 102 "msgpack/_packer.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned PY_LONG_LONG __pyx_t_4;
  PY_LONG_LONG __pyx_t_5;
  long __pyx_t_6;
  float __pyx_t_7;
  double __pyx_t_8;
  char *__pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  struct __pyx_opt_args_7msgpack_7_packer_6Packer__pack __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *(*__pyx_t_19)(PyObject *);
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 102 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("_pack", 0);

#line 102 "msgpack/_packer.pyx"
  if (__pyx_optional_args) {

#line 102 "msgpack/_packer.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 102 "msgpack/_packer.pyx"
      __pyx_v_nest_limit = __pyx_optional_args->nest_limit;

#line 102 "msgpack/_packer.pyx"
    }

#line 102 "msgpack/_packer.pyx"
  }

#line 102 "msgpack/_packer.pyx"
  __Pyx_INCREF(__pyx_v_o);

  /* "msgpack/_packer.pyx":112
 *         cdef dict d
 * 
 *         if nest_limit < 0:             # <<<<<<<<<<<<<<
 *             raise PackValueError("recursion limit exceeded.")
 * 
 */

#line 112 "msgpack/_packer.pyx"
  __pyx_t_1 = (__pyx_v_nest_limit < 0);

#line 112 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":113
 * 
 *         if nest_limit < 0:
 *             raise PackValueError("recursion limit exceeded.")             # <<<<<<<<<<<<<<
 * 
 *         if o is None:
 */

#line 113 "msgpack/_packer.pyx"
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PackValueError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 113 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 113 "msgpack/_packer.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_11), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 113 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 113 "msgpack/_packer.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 113 "msgpack/_packer.pyx"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 113 "msgpack/_packer.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 113 "msgpack/_packer.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 113 "msgpack/_packer.pyx"
    goto __pyx_L3;

#line 113 "msgpack/_packer.pyx"
  }

#line 113 "msgpack/_packer.pyx"
  __pyx_L3:;

  /* "msgpack/_packer.pyx":115
 *             raise PackValueError("recursion limit exceeded.")
 * 
 *         if o is None:             # <<<<<<<<<<<<<<
 *             ret = msgpack_pack_nil(&self.pk)
 *         elif isinstance(o, bool):
 */

#line 115 "msgpack/_packer.pyx"
  __pyx_t_1 = (__pyx_v_o == Py_None);

#line 115 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":116
 * 
 *         if o is None:
 *             ret = msgpack_pack_nil(&self.pk)             # <<<<<<<<<<<<<<
 *         elif isinstance(o, bool):
 *             if o:
 */

#line 116 "msgpack/_packer.pyx"
    __pyx_v_ret = msgpack_pack_nil((&__pyx_v_self->pk));

#line 116 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 116 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":117
 *         if o is None:
 *             ret = msgpack_pack_nil(&self.pk)
 *         elif isinstance(o, bool):             # <<<<<<<<<<<<<<
 *             if o:
 *                 ret = msgpack_pack_true(&self.pk)
 */

#line 117 "msgpack/_packer.pyx"
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, ((PyObject*)__pyx_ptype_7cpython_4bool_bool)); 

#line 117 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":118
 *             ret = msgpack_pack_nil(&self.pk)
 *         elif isinstance(o, bool):
 *             if o:             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_true(&self.pk)
 *             else:
 */

#line 118 "msgpack/_packer.pyx"
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_o); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 118 "msgpack/_packer.pyx"
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":119
 *         elif isinstance(o, bool):
 *             if o:
 *                 ret = msgpack_pack_true(&self.pk)             # <<<<<<<<<<<<<<
 *             else:
 *                 ret = msgpack_pack_false(&self.pk)
 */

#line 119 "msgpack/_packer.pyx"
      __pyx_v_ret = msgpack_pack_true((&__pyx_v_self->pk));

#line 119 "msgpack/_packer.pyx"
      goto __pyx_L5;

#line 119 "msgpack/_packer.pyx"
    }

#line 119 "msgpack/_packer.pyx"
    /*else*/ {

      /* "msgpack/_packer.pyx":121
 *                 ret = msgpack_pack_true(&self.pk)
 *             else:
 *                 ret = msgpack_pack_false(&self.pk)             # <<<<<<<<<<<<<<
 *         elif PyLong_Check(o):
 *             if o > 0:
 */

#line 121 "msgpack/_packer.pyx"
      __pyx_v_ret = msgpack_pack_false((&__pyx_v_self->pk));

#line 121 "msgpack/_packer.pyx"
    }

#line 121 "msgpack/_packer.pyx"
    __pyx_L5:;

#line 121 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 121 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":122
 *             else:
 *                 ret = msgpack_pack_false(&self.pk)
 *         elif PyLong_Check(o):             # <<<<<<<<<<<<<<
 *             if o > 0:
 *                 ullval = o
 */

#line 122 "msgpack/_packer.pyx"
  __pyx_t_1 = PyLong_Check(__pyx_v_o);

#line 122 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":123
 *                 ret = msgpack_pack_false(&self.pk)
 *         elif PyLong_Check(o):
 *             if o > 0:             # <<<<<<<<<<<<<<
 *                 ullval = o
 *                 ret = msgpack_pack_unsigned_long_long(&self.pk, ullval)
 */

#line 123 "msgpack/_packer.pyx"
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_o, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 123 "msgpack/_packer.pyx"
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 123 "msgpack/_packer.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 123 "msgpack/_packer.pyx"
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":124
 *         elif PyLong_Check(o):
 *             if o > 0:
 *                 ullval = o             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_unsigned_long_long(&self.pk, ullval)
 *             else:
 */

#line 124 "msgpack/_packer.pyx"
      __pyx_t_4 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_o); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 124 "msgpack/_packer.pyx"
      __pyx_v_ullval = __pyx_t_4;

      /* "msgpack/_packer.pyx":125
 *             if o > 0:
 *                 ullval = o
 *                 ret = msgpack_pack_unsigned_long_long(&self.pk, ullval)             # <<<<<<<<<<<<<<
 *             else:
 *                 llval = o
 */

#line 125 "msgpack/_packer.pyx"
      __pyx_v_ret = msgpack_pack_unsigned_long_long((&__pyx_v_self->pk), __pyx_v_ullval);

#line 125 "msgpack/_packer.pyx"
      goto __pyx_L6;

#line 125 "msgpack/_packer.pyx"
    }

#line 125 "msgpack/_packer.pyx"
    /*else*/ {

      /* "msgpack/_packer.pyx":127
 *                 ret = msgpack_pack_unsigned_long_long(&self.pk, ullval)
 *             else:
 *                 llval = o             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_long_long(&self.pk, llval)
 *         elif PyInt_Check(o):
 */

#line 127 "msgpack/_packer.pyx"
      __pyx_t_5 = __Pyx_PyInt_AsLongLong(__pyx_v_o); if (unlikely((__pyx_t_5 == (PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 127 "msgpack/_packer.pyx"
      __pyx_v_llval = __pyx_t_5;

      /* "msgpack/_packer.pyx":128
 *             else:
 *                 llval = o
 *                 ret = msgpack_pack_long_long(&self.pk, llval)             # <<<<<<<<<<<<<<
 *         elif PyInt_Check(o):
 *             longval = o
 */

#line 128 "msgpack/_packer.pyx"
      __pyx_v_ret = msgpack_pack_long_long((&__pyx_v_self->pk), __pyx_v_llval);

#line 128 "msgpack/_packer.pyx"
    }

#line 128 "msgpack/_packer.pyx"
    __pyx_L6:;

#line 128 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 128 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":129
 *                 llval = o
 *                 ret = msgpack_pack_long_long(&self.pk, llval)
 *         elif PyInt_Check(o):             # <<<<<<<<<<<<<<
 *             longval = o
 *             ret = msgpack_pack_long(&self.pk, longval)
 */

#line 129 "msgpack/_packer.pyx"
  __pyx_t_1 = PyInt_Check(__pyx_v_o);

#line 129 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":130
 *                 ret = msgpack_pack_long_long(&self.pk, llval)
 *         elif PyInt_Check(o):
 *             longval = o             # <<<<<<<<<<<<<<
 *             ret = msgpack_pack_long(&self.pk, longval)
 *         elif PyFloat_Check(o):
 */

#line 130 "msgpack/_packer.pyx"
    __pyx_t_6 = __Pyx_PyInt_AsLong(__pyx_v_o); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 130 "msgpack/_packer.pyx"
    __pyx_v_longval = __pyx_t_6;

    /* "msgpack/_packer.pyx":131
 *         elif PyInt_Check(o):
 *             longval = o
 *             ret = msgpack_pack_long(&self.pk, longval)             # <<<<<<<<<<<<<<
 *         elif PyFloat_Check(o):
 *             if self.use_float:
 */

#line 131 "msgpack/_packer.pyx"
    __pyx_v_ret = msgpack_pack_long((&__pyx_v_self->pk), __pyx_v_longval);

#line 131 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 131 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":132
 *             longval = o
 *             ret = msgpack_pack_long(&self.pk, longval)
 *         elif PyFloat_Check(o):             # <<<<<<<<<<<<<<
 *             if self.use_float:
 *                fval = o
 */

#line 132 "msgpack/_packer.pyx"
  __pyx_t_1 = PyFloat_Check(__pyx_v_o);

#line 132 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":133
 *             ret = msgpack_pack_long(&self.pk, longval)
 *         elif PyFloat_Check(o):
 *             if self.use_float:             # <<<<<<<<<<<<<<
 *                fval = o
 *                ret = msgpack_pack_float(&self.pk, fval)
 */

#line 133 "msgpack/_packer.pyx"
    __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->use_float)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 133 "msgpack/_packer.pyx"
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":134
 *         elif PyFloat_Check(o):
 *             if self.use_float:
 *                fval = o             # <<<<<<<<<<<<<<
 *                ret = msgpack_pack_float(&self.pk, fval)
 *             else:
 */

#line 134 "msgpack/_packer.pyx"
      __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_v_o); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 134 "msgpack/_packer.pyx"
      __pyx_v_fval = __pyx_t_7;

      /* "msgpack/_packer.pyx":135
 *             if self.use_float:
 *                fval = o
 *                ret = msgpack_pack_float(&self.pk, fval)             # <<<<<<<<<<<<<<
 *             else:
 *                dval = o
 */

#line 135 "msgpack/_packer.pyx"
      __pyx_v_ret = msgpack_pack_float((&__pyx_v_self->pk), __pyx_v_fval);

#line 135 "msgpack/_packer.pyx"
      goto __pyx_L7;

#line 135 "msgpack/_packer.pyx"
    }

#line 135 "msgpack/_packer.pyx"
    /*else*/ {

      /* "msgpack/_packer.pyx":137
 *                ret = msgpack_pack_float(&self.pk, fval)
 *             else:
 *                dval = o             # <<<<<<<<<<<<<<
 *                ret = msgpack_pack_double(&self.pk, dval)
 *         elif PyBytes_Check(o):
 */

#line 137 "msgpack/_packer.pyx"
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_o); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "msgpack/_packer.pyx"
      __pyx_v_dval = __pyx_t_8;

      /* "msgpack/_packer.pyx":138
 *             else:
 *                dval = o
 *                ret = msgpack_pack_double(&self.pk, dval)             # <<<<<<<<<<<<<<
 *         elif PyBytes_Check(o):
 *             rawval = o
 */

#line 138 "msgpack/_packer.pyx"
      __pyx_v_ret = msgpack_pack_double((&__pyx_v_self->pk), __pyx_v_dval);

#line 138 "msgpack/_packer.pyx"
    }

#line 138 "msgpack/_packer.pyx"
    __pyx_L7:;

#line 138 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 138 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":139
 *                dval = o
 *                ret = msgpack_pack_double(&self.pk, dval)
 *         elif PyBytes_Check(o):             # <<<<<<<<<<<<<<
 *             rawval = o
 *             ret = msgpack_pack_raw(&self.pk, len(o))
 */

#line 139 "msgpack/_packer.pyx"
  __pyx_t_1 = PyBytes_Check(__pyx_v_o);

#line 139 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":140
 *                ret = msgpack_pack_double(&self.pk, dval)
 *         elif PyBytes_Check(o):
 *             rawval = o             # <<<<<<<<<<<<<<
 *             ret = msgpack_pack_raw(&self.pk, len(o))
 *             if ret == 0:
 */

#line 140 "msgpack/_packer.pyx"
    __pyx_t_9 = PyBytes_AsString(__pyx_v_o); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 140 "msgpack/_packer.pyx"
    __pyx_v_rawval = __pyx_t_9;

    /* "msgpack/_packer.pyx":141
 *         elif PyBytes_Check(o):
 *             rawval = o
 *             ret = msgpack_pack_raw(&self.pk, len(o))             # <<<<<<<<<<<<<<
 *             if ret == 0:
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, len(o))
 */

#line 141 "msgpack/_packer.pyx"
    __pyx_t_10 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 141 "msgpack/_packer.pyx"
    __pyx_v_ret = msgpack_pack_raw((&__pyx_v_self->pk), __pyx_t_10);

    /* "msgpack/_packer.pyx":142
 *             rawval = o
 *             ret = msgpack_pack_raw(&self.pk, len(o))
 *             if ret == 0:             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, len(o))
 *         elif PyUnicode_Check(o):
 */

#line 142 "msgpack/_packer.pyx"
    __pyx_t_1 = (__pyx_v_ret == 0);

#line 142 "msgpack/_packer.pyx"
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":143
 *             ret = msgpack_pack_raw(&self.pk, len(o))
 *             if ret == 0:
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, len(o))             # <<<<<<<<<<<<<<
 *         elif PyUnicode_Check(o):
 *             if not self.encoding:
 */

#line 143 "msgpack/_packer.pyx"
      __pyx_t_10 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 143 "msgpack/_packer.pyx"
      __pyx_v_ret = msgpack_pack_raw_body((&__pyx_v_self->pk), __pyx_v_rawval, __pyx_t_10);

#line 143 "msgpack/_packer.pyx"
      goto __pyx_L8;

#line 143 "msgpack/_packer.pyx"
    }

#line 143 "msgpack/_packer.pyx"
    __pyx_L8:;

#line 143 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 143 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":144
 *             if ret == 0:
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, len(o))
 *         elif PyUnicode_Check(o):             # <<<<<<<<<<<<<<
 *             if not self.encoding:
 *                 raise TypeError("Can't encode unicode string: no encoding is specified")
 */

#line 144 "msgpack/_packer.pyx"
  __pyx_t_1 = PyUnicode_Check(__pyx_v_o);

#line 144 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":145
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, len(o))
 *         elif PyUnicode_Check(o):
 *             if not self.encoding:             # <<<<<<<<<<<<<<
 *                 raise TypeError("Can't encode unicode string: no encoding is specified")
 *             o = PyUnicode_AsEncodedString(o, self.encoding, self.unicode_errors)
 */

#line 145 "msgpack/_packer.pyx"
    __pyx_t_1 = (!(__pyx_v_self->encoding != 0));

#line 145 "msgpack/_packer.pyx"
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":146
 *         elif PyUnicode_Check(o):
 *             if not self.encoding:
 *                 raise TypeError("Can't encode unicode string: no encoding is specified")             # <<<<<<<<<<<<<<
 *             o = PyUnicode_AsEncodedString(o, self.encoding, self.unicode_errors)
 *             rawval = o
 */

#line 146 "msgpack/_packer.pyx"
      __pyx_t_3 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_13), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 146 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 146 "msgpack/_packer.pyx"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 146 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 146 "msgpack/_packer.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 146 "msgpack/_packer.pyx"
      goto __pyx_L9;

#line 146 "msgpack/_packer.pyx"
    }

#line 146 "msgpack/_packer.pyx"
    __pyx_L9:;

    /* "msgpack/_packer.pyx":147
 *             if not self.encoding:
 *                 raise TypeError("Can't encode unicode string: no encoding is specified")
 *             o = PyUnicode_AsEncodedString(o, self.encoding, self.unicode_errors)             # <<<<<<<<<<<<<<
 *             rawval = o
 *             ret = msgpack_pack_raw(&self.pk, len(o))
 */

#line 147 "msgpack/_packer.pyx"
    __pyx_t_3 = PyUnicode_AsEncodedString(__pyx_v_o, __pyx_v_self->encoding, __pyx_v_self->unicode_errors); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 147 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 147 "msgpack/_packer.pyx"
    __Pyx_DECREF(__pyx_v_o);

#line 147 "msgpack/_packer.pyx"
    __pyx_v_o = __pyx_t_3;

#line 147 "msgpack/_packer.pyx"
    __pyx_t_3 = 0;

    /* "msgpack/_packer.pyx":148
 *                 raise TypeError("Can't encode unicode string: no encoding is specified")
 *             o = PyUnicode_AsEncodedString(o, self.encoding, self.unicode_errors)
 *             rawval = o             # <<<<<<<<<<<<<<
 *             ret = msgpack_pack_raw(&self.pk, len(o))
 *             if ret == 0:
 */

#line 148 "msgpack/_packer.pyx"
    __pyx_t_9 = PyBytes_AsString(__pyx_v_o); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 148 "msgpack/_packer.pyx"
    __pyx_v_rawval = __pyx_t_9;

    /* "msgpack/_packer.pyx":149
 *             o = PyUnicode_AsEncodedString(o, self.encoding, self.unicode_errors)
 *             rawval = o
 *             ret = msgpack_pack_raw(&self.pk, len(o))             # <<<<<<<<<<<<<<
 *             if ret == 0:
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, len(o))
 */

#line 149 "msgpack/_packer.pyx"
    __pyx_t_10 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 149 "msgpack/_packer.pyx"
    __pyx_v_ret = msgpack_pack_raw((&__pyx_v_self->pk), __pyx_t_10);

    /* "msgpack/_packer.pyx":150
 *             rawval = o
 *             ret = msgpack_pack_raw(&self.pk, len(o))
 *             if ret == 0:             # <<<<<<<<<<<<<<
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, len(o))
 *         elif PyDict_CheckExact(o):
 */

#line 150 "msgpack/_packer.pyx"
    __pyx_t_1 = (__pyx_v_ret == 0);

#line 150 "msgpack/_packer.pyx"
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":151
 *             ret = msgpack_pack_raw(&self.pk, len(o))
 *             if ret == 0:
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, len(o))             # <<<<<<<<<<<<<<
 *         elif PyDict_CheckExact(o):
 *             d = <dict>o
 */

#line 151 "msgpack/_packer.pyx"
      __pyx_t_10 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 151 "msgpack/_packer.pyx"
      __pyx_v_ret = msgpack_pack_raw_body((&__pyx_v_self->pk), __pyx_v_rawval, __pyx_t_10);

#line 151 "msgpack/_packer.pyx"
      goto __pyx_L10;

#line 151 "msgpack/_packer.pyx"
    }

#line 151 "msgpack/_packer.pyx"
    __pyx_L10:;

#line 151 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 151 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":152
 *             if ret == 0:
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, len(o))
 *         elif PyDict_CheckExact(o):             # <<<<<<<<<<<<<<
 *             d = <dict>o
 *             ret = msgpack_pack_map(&self.pk, len(d))
 */

#line 152 "msgpack/_packer.pyx"
  __pyx_t_1 = PyDict_CheckExact(__pyx_v_o);

#line 152 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":153
 *                 ret = msgpack_pack_raw_body(&self.pk, rawval, len(o))
 *         elif PyDict_CheckExact(o):
 *             d = <dict>o             # <<<<<<<<<<<<<<
 *             ret = msgpack_pack_map(&self.pk, len(d))
 *             if ret == 0:
 */

#line 153 "msgpack/_packer.pyx"
    __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_v_o)));

#line 153 "msgpack/_packer.pyx"
    __pyx_v_d = ((PyObject*)__pyx_v_o);

    /* "msgpack/_packer.pyx":154
 *         elif PyDict_CheckExact(o):
 *             d = <dict>o
 *             ret = msgpack_pack_map(&self.pk, len(d))             # <<<<<<<<<<<<<<
 *             if ret == 0:
 *                 for k, v in d.iteritems():
 */

#line 154 "msgpack/_packer.pyx"
    if (unlikely(((PyObject *)__pyx_v_d) == Py_None)) {

#line 154 "msgpack/_packer.pyx"
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");

#line 154 "msgpack/_packer.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 154 "msgpack/_packer.pyx"
    }

#line 154 "msgpack/_packer.pyx"
    __pyx_t_10 = PyDict_Size(((PyObject *)__pyx_v_d)); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 154 "msgpack/_packer.pyx"
    __pyx_v_ret = msgpack_pack_map((&__pyx_v_self->pk), __pyx_t_10);

    /* "msgpack/_packer.pyx":155
 *             d = <dict>o
 *             ret = msgpack_pack_map(&self.pk, len(d))
 *             if ret == 0:             # <<<<<<<<<<<<<<
 *                 for k, v in d.iteritems():
 *                     ret = self._pack(k, nest_limit-1)
 */

#line 155 "msgpack/_packer.pyx"
    __pyx_t_1 = (__pyx_v_ret == 0);

#line 155 "msgpack/_packer.pyx"
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":156
 *             ret = msgpack_pack_map(&self.pk, len(d))
 *             if ret == 0:
 *                 for k, v in d.iteritems():             # <<<<<<<<<<<<<<
 *                     ret = self._pack(k, nest_limit-1)
 *                     if ret != 0: break
 */

#line 156 "msgpack/_packer.pyx"
      __pyx_t_10 = 0;

#line 156 "msgpack/_packer.pyx"
      if (unlikely(((PyObject *)__pyx_v_d) == Py_None)) {

#line 156 "msgpack/_packer.pyx"
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");

#line 156 "msgpack/_packer.pyx"
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 156 "msgpack/_packer.pyx"
      }

#line 156 "msgpack/_packer.pyx"
      __pyx_t_2 = __Pyx_dict_iterator(((PyObject *)__pyx_v_d), 1, ((PyObject *)__pyx_n_s__iteritems), (&__pyx_t_11), (&__pyx_t_12)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 156 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 156 "msgpack/_packer.pyx"
      __Pyx_XDECREF(__pyx_t_3);

#line 156 "msgpack/_packer.pyx"
      __pyx_t_3 = __pyx_t_2;

#line 156 "msgpack/_packer.pyx"
      __pyx_t_2 = 0;

#line 156 "msgpack/_packer.pyx"
      while (1) {

#line 156 "msgpack/_packer.pyx"
        __pyx_t_14 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_11, &__pyx_t_10, &__pyx_t_2, &__pyx_t_13, NULL, __pyx_t_12);

#line 156 "msgpack/_packer.pyx"
        if (unlikely(__pyx_t_14 == 0)) break;

#line 156 "msgpack/_packer.pyx"
        if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 156 "msgpack/_packer.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 156 "msgpack/_packer.pyx"
        __Pyx_GOTREF(__pyx_t_13);

#line 156 "msgpack/_packer.pyx"
        __Pyx_XDECREF(__pyx_v_k);

#line 156 "msgpack/_packer.pyx"
        __pyx_v_k = __pyx_t_2;

#line 156 "msgpack/_packer.pyx"
        __pyx_t_2 = 0;

#line 156 "msgpack/_packer.pyx"
        __Pyx_XDECREF(__pyx_v_v);

#line 156 "msgpack/_packer.pyx"
        __pyx_v_v = __pyx_t_13;

#line 156 "msgpack/_packer.pyx"
        __pyx_t_13 = 0;

        /* "msgpack/_packer.pyx":157
 *             if ret == 0:
 *                 for k, v in d.iteritems():
 *                     ret = self._pack(k, nest_limit-1)             # <<<<<<<<<<<<<<
 *                     if ret != 0: break
 *                     ret = self._pack(v, nest_limit-1)
 */

#line 157 "msgpack/_packer.pyx"
        __pyx_t_15.__pyx_n = 1;

#line 157 "msgpack/_packer.pyx"
        __pyx_t_15.nest_limit = (__pyx_v_nest_limit - 1);

#line 157 "msgpack/_packer.pyx"
        __pyx_t_14 = ((struct __pyx_vtabstruct_7msgpack_7_packer_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_k, &__pyx_t_15); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 157 "msgpack/_packer.pyx"
        __pyx_v_ret = __pyx_t_14;

        /* "msgpack/_packer.pyx":158
 *                 for k, v in d.iteritems():
 *                     ret = self._pack(k, nest_limit-1)
 *                     if ret != 0: break             # <<<<<<<<<<<<<<
 *                     ret = self._pack(v, nest_limit-1)
 *                     if ret != 0: break
 */

#line 158 "msgpack/_packer.pyx"
        __pyx_t_1 = (__pyx_v_ret != 0);

#line 158 "msgpack/_packer.pyx"
        if (__pyx_t_1) {

#line 158 "msgpack/_packer.pyx"
          goto __pyx_L13_break;

#line 158 "msgpack/_packer.pyx"
          goto __pyx_L14;

#line 158 "msgpack/_packer.pyx"
        }

#line 158 "msgpack/_packer.pyx"
        __pyx_L14:;

        /* "msgpack/_packer.pyx":159
 *                     ret = self._pack(k, nest_limit-1)
 *                     if ret != 0: break
 *                     ret = self._pack(v, nest_limit-1)             # <<<<<<<<<<<<<<
 *                     if ret != 0: break
 *         elif PyDict_Check(o):
 */

#line 159 "msgpack/_packer.pyx"
        __pyx_t_15.__pyx_n = 1;

#line 159 "msgpack/_packer.pyx"
        __pyx_t_15.nest_limit = (__pyx_v_nest_limit - 1);

#line 159 "msgpack/_packer.pyx"
        __pyx_t_14 = ((struct __pyx_vtabstruct_7msgpack_7_packer_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_v, &__pyx_t_15); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 159 "msgpack/_packer.pyx"
        __pyx_v_ret = __pyx_t_14;

        /* "msgpack/_packer.pyx":160
 *                     if ret != 0: break
 *                     ret = self._pack(v, nest_limit-1)
 *                     if ret != 0: break             # <<<<<<<<<<<<<<
 *         elif PyDict_Check(o):
 *             ret = msgpack_pack_map(&self.pk, len(o))
 */

#line 160 "msgpack/_packer.pyx"
        __pyx_t_1 = (__pyx_v_ret != 0);

#line 160 "msgpack/_packer.pyx"
        if (__pyx_t_1) {

#line 160 "msgpack/_packer.pyx"
          goto __pyx_L13_break;

#line 160 "msgpack/_packer.pyx"
          goto __pyx_L15;

#line 160 "msgpack/_packer.pyx"
        }

#line 160 "msgpack/_packer.pyx"
        __pyx_L15:;

#line 160 "msgpack/_packer.pyx"
      }

#line 160 "msgpack/_packer.pyx"
      __pyx_L13_break:;

#line 160 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 160 "msgpack/_packer.pyx"
      goto __pyx_L11;

#line 160 "msgpack/_packer.pyx"
    }

#line 160 "msgpack/_packer.pyx"
    __pyx_L11:;

#line 160 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 160 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":161
 *                     ret = self._pack(v, nest_limit-1)
 *                     if ret != 0: break
 *         elif PyDict_Check(o):             # <<<<<<<<<<<<<<
 *             ret = msgpack_pack_map(&self.pk, len(o))
 *             if ret == 0:
 */

#line 161 "msgpack/_packer.pyx"
  __pyx_t_1 = PyDict_Check(__pyx_v_o);

#line 161 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":162
 *                     if ret != 0: break
 *         elif PyDict_Check(o):
 *             ret = msgpack_pack_map(&self.pk, len(o))             # <<<<<<<<<<<<<<
 *             if ret == 0:
 *                 for k, v in o.items():
 */

#line 162 "msgpack/_packer.pyx"
    __pyx_t_11 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 162 "msgpack/_packer.pyx"
    __pyx_v_ret = msgpack_pack_map((&__pyx_v_self->pk), __pyx_t_11);

    /* "msgpack/_packer.pyx":163
 *         elif PyDict_Check(o):
 *             ret = msgpack_pack_map(&self.pk, len(o))
 *             if ret == 0:             # <<<<<<<<<<<<<<
 *                 for k, v in o.items():
 *                     ret = self._pack(k, nest_limit-1)
 */

#line 163 "msgpack/_packer.pyx"
    __pyx_t_1 = (__pyx_v_ret == 0);

#line 163 "msgpack/_packer.pyx"
    if (__pyx_t_1) {

      /* "msgpack/_packer.pyx":164
 *             ret = msgpack_pack_map(&self.pk, len(o))
 *             if ret == 0:
 *                 for k, v in o.items():             # <<<<<<<<<<<<<<
 *                     ret = self._pack(k, nest_limit-1)
 *                     if ret != 0: break
 */

#line 164 "msgpack/_packer.pyx"
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_o, __pyx_n_s__items); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 164 "msgpack/_packer.pyx"
      __pyx_t_13 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_t_13);

#line 164 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 164 "msgpack/_packer.pyx"
      if (PyList_CheckExact(__pyx_t_13) || PyTuple_CheckExact(__pyx_t_13)) {

#line 164 "msgpack/_packer.pyx"
        __pyx_t_3 = __pyx_t_13; __Pyx_INCREF(__pyx_t_3); __pyx_t_11 = 0;

#line 164 "msgpack/_packer.pyx"
        __pyx_t_16 = NULL;

#line 164 "msgpack/_packer.pyx"
      } else {
        __pyx_t_11 = -1; 
#line 164 "msgpack/_packer.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 164 "msgpack/_packer.pyx"
        __pyx_t_16 = Py_TYPE(__pyx_t_3)->tp_iternext;

#line 164 "msgpack/_packer.pyx"
      }

#line 164 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 164 "msgpack/_packer.pyx"
      for (;;) {

#line 164 "msgpack/_packer.pyx"
        if (!__pyx_t_16 && PyList_CheckExact(__pyx_t_3)) {

#line 164 "msgpack/_packer.pyx"
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 164 "msgpack/_packer.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 164 "msgpack/_packer.pyx"
          __pyx_t_13 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_13); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
          #else

#line 164 "msgpack/_packer.pyx"
          __pyx_t_13 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
          #endif
        } else 
#line 164 "msgpack/_packer.pyx"
if (!__pyx_t_16 && PyTuple_CheckExact(__pyx_t_3)) {

#line 164 "msgpack/_packer.pyx"
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 164 "msgpack/_packer.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 164 "msgpack/_packer.pyx"
          __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_13); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
          #else

#line 164 "msgpack/_packer.pyx"
          __pyx_t_13 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
          #endif
        } else 
#line 164 "msgpack/_packer.pyx"
{

#line 164 "msgpack/_packer.pyx"
          __pyx_t_13 = __pyx_t_16(__pyx_t_3);

#line 164 "msgpack/_packer.pyx"
          if (unlikely(!__pyx_t_13)) {

#line 164 "msgpack/_packer.pyx"
            if (PyErr_Occurred()) {

#line 164 "msgpack/_packer.pyx"
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();

#line 164 "msgpack/_packer.pyx"
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
            }

#line 164 "msgpack/_packer.pyx"
            break;

#line 164 "msgpack/_packer.pyx"
          }

#line 164 "msgpack/_packer.pyx"
          __Pyx_GOTREF(__pyx_t_13);

#line 164 "msgpack/_packer.pyx"
        }

#line 164 "msgpack/_packer.pyx"
        if ((likely(PyTuple_CheckExact(__pyx_t_13))) || (PyList_CheckExact(__pyx_t_13))) {

#line 164 "msgpack/_packer.pyx"
          PyObject* sequence = __pyx_t_13;

#line 164 "msgpack/_packer.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 164 "msgpack/_packer.pyx"
          Py_ssize_t size = Py_SIZE(sequence);

#line 164 "msgpack/_packer.pyx"
          #else

#line 164 "msgpack/_packer.pyx"
          Py_ssize_t size = PySequence_Size(sequence);

#line 164 "msgpack/_packer.pyx"
          #endif

#line 164 "msgpack/_packer.pyx"
          if (unlikely(size != 2)) {

#line 164 "msgpack/_packer.pyx"
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 164 "msgpack/_packer.pyx"
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 164 "msgpack/_packer.pyx"
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
          }

#line 164 "msgpack/_packer.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 164 "msgpack/_packer.pyx"
          if (likely(PyTuple_CheckExact(sequence))) {

#line 164 "msgpack/_packer.pyx"
            __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 

#line 164 "msgpack/_packer.pyx"
            __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 

#line 164 "msgpack/_packer.pyx"
          } else {

#line 164 "msgpack/_packer.pyx"
            __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 

#line 164 "msgpack/_packer.pyx"
            __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 

#line 164 "msgpack/_packer.pyx"
          }

#line 164 "msgpack/_packer.pyx"
          __Pyx_INCREF(__pyx_t_2);

#line 164 "msgpack/_packer.pyx"
          __Pyx_INCREF(__pyx_t_17);

#line 164 "msgpack/_packer.pyx"
          #else

#line 164 "msgpack/_packer.pyx"
          __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
          __Pyx_GOTREF(__pyx_t_2);

#line 164 "msgpack/_packer.pyx"
          __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
          __Pyx_GOTREF(__pyx_t_17);

#line 164 "msgpack/_packer.pyx"
          #endif

#line 164 "msgpack/_packer.pyx"
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 164 "msgpack/_packer.pyx"
        } else

#line 164 "msgpack/_packer.pyx"
        {

#line 164 "msgpack/_packer.pyx"
          Py_ssize_t index = -1;

#line 164 "msgpack/_packer.pyx"
          __pyx_t_18 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
          __Pyx_GOTREF(__pyx_t_18);

#line 164 "msgpack/_packer.pyx"
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 164 "msgpack/_packer.pyx"
          __pyx_t_19 = Py_TYPE(__pyx_t_18)->tp_iternext;
          index = 0; __pyx_t_2 = __pyx_t_19(__pyx_t_18); if (unlikely(!__pyx_t_2)) 
#line 164 "msgpack/_packer.pyx"
goto __pyx_L19_unpacking_failed;

#line 164 "msgpack/_packer.pyx"
          __Pyx_GOTREF(__pyx_t_2);
          index = 1; __pyx_t_17 = __pyx_t_19(__pyx_t_18); if (unlikely(!__pyx_t_17)) 
#line 164 "msgpack/_packer.pyx"
goto __pyx_L19_unpacking_failed;

#line 164 "msgpack/_packer.pyx"
          __Pyx_GOTREF(__pyx_t_17);

#line 164 "msgpack/_packer.pyx"
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_19(__pyx_t_18), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
          __pyx_t_19 = NULL;

#line 164 "msgpack/_packer.pyx"
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

#line 164 "msgpack/_packer.pyx"
          goto __pyx_L20_unpacking_done;

#line 164 "msgpack/_packer.pyx"
          __pyx_L19_unpacking_failed:;

#line 164 "msgpack/_packer.pyx"
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

#line 164 "msgpack/_packer.pyx"
          __pyx_t_19 = NULL;

#line 164 "msgpack/_packer.pyx"
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 164 "msgpack/_packer.pyx"
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 164 "msgpack/_packer.pyx"
          __pyx_L20_unpacking_done:;

#line 164 "msgpack/_packer.pyx"
        }

#line 164 "msgpack/_packer.pyx"
        __Pyx_XDECREF(__pyx_v_k);

#line 164 "msgpack/_packer.pyx"
        __pyx_v_k = __pyx_t_2;

#line 164 "msgpack/_packer.pyx"
        __pyx_t_2 = 0;

#line 164 "msgpack/_packer.pyx"
        __Pyx_XDECREF(__pyx_v_v);

#line 164 "msgpack/_packer.pyx"
        __pyx_v_v = __pyx_t_17;

#line 164 "msgpack/_packer.pyx"
        __pyx_t_17 = 0;

        /* "msgpack/_packer.pyx":165
 *             if ret == 0:
 *                 for k, v in o.items():
 *                     ret = self._pack(k, nest_limit-1)             # <<<<<<<<<<<<<<
 *                     if ret != 0: break
 *                     ret = self._pack(v, nest_limit-1)
 */

#line 165 "msgpack/_packer.pyx"
        __pyx_t_15.__pyx_n = 1;

#line 165 "msgpack/_packer.pyx"
        __pyx_t_15.nest_limit = (__pyx_v_nest_limit - 1);

#line 165 "msgpack/_packer.pyx"
        __pyx_t_12 = ((struct __pyx_vtabstruct_7msgpack_7_packer_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_k, &__pyx_t_15); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "msgpack/_packer.pyx"
        __pyx_v_ret = __pyx_t_12;

        /* "msgpack/_packer.pyx":166
 *                 for k, v in o.items():
 *                     ret = self._pack(k, nest_limit-1)
 *                     if ret != 0: break             # <<<<<<<<<<<<<<
 *                     ret = self._pack(v, nest_limit-1)
 *                     if ret != 0: break
 */

#line 166 "msgpack/_packer.pyx"
        __pyx_t_1 = (__pyx_v_ret != 0);

#line 166 "msgpack/_packer.pyx"
        if (__pyx_t_1) {

#line 166 "msgpack/_packer.pyx"
          goto __pyx_L18_break;

#line 166 "msgpack/_packer.pyx"
          goto __pyx_L21;

#line 166 "msgpack/_packer.pyx"
        }

#line 166 "msgpack/_packer.pyx"
        __pyx_L21:;

        /* "msgpack/_packer.pyx":167
 *                     ret = self._pack(k, nest_limit-1)
 *                     if ret != 0: break
 *                     ret = self._pack(v, nest_limit-1)             # <<<<<<<<<<<<<<
 *                     if ret != 0: break
 *         elif PyTuple_Check(o) or PyList_Check(o):
 */

#line 167 "msgpack/_packer.pyx"
        __pyx_t_15.__pyx_n = 1;

#line 167 "msgpack/_packer.pyx"
        __pyx_t_15.nest_limit = (__pyx_v_nest_limit - 1);

#line 167 "msgpack/_packer.pyx"
        __pyx_t_12 = ((struct __pyx_vtabstruct_7msgpack_7_packer_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_v, &__pyx_t_15); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "msgpack/_packer.pyx"
        __pyx_v_ret = __pyx_t_12;

        /* "msgpack/_packer.pyx":168
 *                     if ret != 0: break
 *                     ret = self._pack(v, nest_limit-1)
 *                     if ret != 0: break             # <<<<<<<<<<<<<<
 *         elif PyTuple_Check(o) or PyList_Check(o):
 *             ret = msgpack_pack_array(&self.pk, len(o))
 */

#line 168 "msgpack/_packer.pyx"
        __pyx_t_1 = (__pyx_v_ret != 0);

#line 168 "msgpack/_packer.pyx"
        if (__pyx_t_1) {

#line 168 "msgpack/_packer.pyx"
          goto __pyx_L18_break;

#line 168 "msgpack/_packer.pyx"
          goto __pyx_L22;

#line 168 "msgpack/_packer.pyx"
        }

#line 168 "msgpack/_packer.pyx"
        __pyx_L22:;

#line 168 "msgpack/_packer.pyx"
      }

#line 168 "msgpack/_packer.pyx"
      __pyx_L18_break:;

#line 168 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 168 "msgpack/_packer.pyx"
      goto __pyx_L16;

#line 168 "msgpack/_packer.pyx"
    }

#line 168 "msgpack/_packer.pyx"
    __pyx_L16:;

#line 168 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 168 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":169
 *                     ret = self._pack(v, nest_limit-1)
 *                     if ret != 0: break
 *         elif PyTuple_Check(o) or PyList_Check(o):             # <<<<<<<<<<<<<<
 *             ret = msgpack_pack_array(&self.pk, len(o))
 *             if ret == 0:
 */

#line 169 "msgpack/_packer.pyx"
  __pyx_t_1 = PyTuple_Check(__pyx_v_o);

#line 169 "msgpack/_packer.pyx"
  if (!__pyx_t_1) {

#line 169 "msgpack/_packer.pyx"
    __pyx_t_20 = PyList_Check(__pyx_v_o);

#line 169 "msgpack/_packer.pyx"
    __pyx_t_21 = __pyx_t_20;

#line 169 "msgpack/_packer.pyx"
  } else {

#line 169 "msgpack/_packer.pyx"
    __pyx_t_21 = __pyx_t_1;

#line 169 "msgpack/_packer.pyx"
  }

#line 169 "msgpack/_packer.pyx"
  if (__pyx_t_21) {

    /* "msgpack/_packer.pyx":170
 *                     if ret != 0: break
 *         elif PyTuple_Check(o) or PyList_Check(o):
 *             ret = msgpack_pack_array(&self.pk, len(o))             # <<<<<<<<<<<<<<
 *             if ret == 0:
 *                 for v in o:
 */

#line 170 "msgpack/_packer.pyx"
    __pyx_t_11 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 170 "msgpack/_packer.pyx"
    __pyx_v_ret = msgpack_pack_array((&__pyx_v_self->pk), __pyx_t_11);

    /* "msgpack/_packer.pyx":171
 *         elif PyTuple_Check(o) or PyList_Check(o):
 *             ret = msgpack_pack_array(&self.pk, len(o))
 *             if ret == 0:             # <<<<<<<<<<<<<<
 *                 for v in o:
 *                     ret = self._pack(v, nest_limit-1)
 */

#line 171 "msgpack/_packer.pyx"
    __pyx_t_21 = (__pyx_v_ret == 0);

#line 171 "msgpack/_packer.pyx"
    if (__pyx_t_21) {

      /* "msgpack/_packer.pyx":172
 *             ret = msgpack_pack_array(&self.pk, len(o))
 *             if ret == 0:
 *                 for v in o:             # <<<<<<<<<<<<<<
 *                     ret = self._pack(v, nest_limit-1)
 *                     if ret != 0: break
 */

#line 172 "msgpack/_packer.pyx"
      if (PyList_CheckExact(__pyx_v_o) || PyTuple_CheckExact(__pyx_v_o)) {

#line 172 "msgpack/_packer.pyx"
        __pyx_t_3 = __pyx_v_o; __Pyx_INCREF(__pyx_t_3); __pyx_t_11 = 0;

#line 172 "msgpack/_packer.pyx"
        __pyx_t_16 = NULL;

#line 172 "msgpack/_packer.pyx"
      } else {
        __pyx_t_11 = -1; 
#line 172 "msgpack/_packer.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 172 "msgpack/_packer.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 172 "msgpack/_packer.pyx"
        __pyx_t_16 = Py_TYPE(__pyx_t_3)->tp_iternext;

#line 172 "msgpack/_packer.pyx"
      }

#line 172 "msgpack/_packer.pyx"
      for (;;) {

#line 172 "msgpack/_packer.pyx"
        if (!__pyx_t_16 && PyList_CheckExact(__pyx_t_3)) {

#line 172 "msgpack/_packer.pyx"
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 172 "msgpack/_packer.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 172 "msgpack/_packer.pyx"
          __pyx_t_13 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_13); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 172 "msgpack/_packer.pyx"
          #else

#line 172 "msgpack/_packer.pyx"
          __pyx_t_13 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 172 "msgpack/_packer.pyx"
          #endif
        } else 
#line 172 "msgpack/_packer.pyx"
if (!__pyx_t_16 && PyTuple_CheckExact(__pyx_t_3)) {

#line 172 "msgpack/_packer.pyx"
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 172 "msgpack/_packer.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 172 "msgpack/_packer.pyx"
          __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_13); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 172 "msgpack/_packer.pyx"
          #else

#line 172 "msgpack/_packer.pyx"
          __pyx_t_13 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 172 "msgpack/_packer.pyx"
          #endif
        } else 
#line 172 "msgpack/_packer.pyx"
{

#line 172 "msgpack/_packer.pyx"
          __pyx_t_13 = __pyx_t_16(__pyx_t_3);

#line 172 "msgpack/_packer.pyx"
          if (unlikely(!__pyx_t_13)) {

#line 172 "msgpack/_packer.pyx"
            if (PyErr_Occurred()) {

#line 172 "msgpack/_packer.pyx"
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();

#line 172 "msgpack/_packer.pyx"
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 172 "msgpack/_packer.pyx"
            }

#line 172 "msgpack/_packer.pyx"
            break;

#line 172 "msgpack/_packer.pyx"
          }

#line 172 "msgpack/_packer.pyx"
          __Pyx_GOTREF(__pyx_t_13);

#line 172 "msgpack/_packer.pyx"
        }

#line 172 "msgpack/_packer.pyx"
        __Pyx_XDECREF(__pyx_v_v);

#line 172 "msgpack/_packer.pyx"
        __pyx_v_v = __pyx_t_13;

#line 172 "msgpack/_packer.pyx"
        __pyx_t_13 = 0;

        /* "msgpack/_packer.pyx":173
 *             if ret == 0:
 *                 for v in o:
 *                     ret = self._pack(v, nest_limit-1)             # <<<<<<<<<<<<<<
 *                     if ret != 0: break
 *         elif self._default:
 */

#line 173 "msgpack/_packer.pyx"
        __pyx_t_15.__pyx_n = 1;

#line 173 "msgpack/_packer.pyx"
        __pyx_t_15.nest_limit = (__pyx_v_nest_limit - 1);

#line 173 "msgpack/_packer.pyx"
        __pyx_t_12 = ((struct __pyx_vtabstruct_7msgpack_7_packer_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_v, &__pyx_t_15); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 173 "msgpack/_packer.pyx"
        __pyx_v_ret = __pyx_t_12;

        /* "msgpack/_packer.pyx":174
 *                 for v in o:
 *                     ret = self._pack(v, nest_limit-1)
 *                     if ret != 0: break             # <<<<<<<<<<<<<<
 *         elif self._default:
 *             o = self._default(o)
 */

#line 174 "msgpack/_packer.pyx"
        __pyx_t_21 = (__pyx_v_ret != 0);

#line 174 "msgpack/_packer.pyx"
        if (__pyx_t_21) {

#line 174 "msgpack/_packer.pyx"
          goto __pyx_L25_break;

#line 174 "msgpack/_packer.pyx"
          goto __pyx_L26;

#line 174 "msgpack/_packer.pyx"
        }

#line 174 "msgpack/_packer.pyx"
        __pyx_L26:;

#line 174 "msgpack/_packer.pyx"
      }

#line 174 "msgpack/_packer.pyx"
      __pyx_L25_break:;

#line 174 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 174 "msgpack/_packer.pyx"
      goto __pyx_L23;

#line 174 "msgpack/_packer.pyx"
    }

#line 174 "msgpack/_packer.pyx"
    __pyx_L23:;

#line 174 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 174 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":175
 *                     ret = self._pack(v, nest_limit-1)
 *                     if ret != 0: break
 *         elif self._default:             # <<<<<<<<<<<<<<
 *             o = self._default(o)
 *             ret = self._pack(o, nest_limit-1)
 */

#line 175 "msgpack/_packer.pyx"
  __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_v_self->_default); if (unlikely(__pyx_t_21 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 175 "msgpack/_packer.pyx"
  if (__pyx_t_21) {

    /* "msgpack/_packer.pyx":176
 *                     if ret != 0: break
 *         elif self._default:
 *             o = self._default(o)             # <<<<<<<<<<<<<<
 *             ret = self._pack(o, nest_limit-1)
 *         else:
 */

#line 176 "msgpack/_packer.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 176 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 176 "msgpack/_packer.pyx"
    __Pyx_INCREF(__pyx_v_o);

#line 176 "msgpack/_packer.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);

#line 176 "msgpack/_packer.pyx"
    __Pyx_GIVEREF(__pyx_v_o);

#line 176 "msgpack/_packer.pyx"
    __pyx_t_13 = PyObject_Call(__pyx_v_self->_default, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 176 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_13);

#line 176 "msgpack/_packer.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 176 "msgpack/_packer.pyx"
    __Pyx_DECREF(__pyx_v_o);

#line 176 "msgpack/_packer.pyx"
    __pyx_v_o = __pyx_t_13;

#line 176 "msgpack/_packer.pyx"
    __pyx_t_13 = 0;

    /* "msgpack/_packer.pyx":177
 *         elif self._default:
 *             o = self._default(o)
 *             ret = self._pack(o, nest_limit-1)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("can't serialize %r" % (o,))
 */

#line 177 "msgpack/_packer.pyx"
    __pyx_t_15.__pyx_n = 1;

#line 177 "msgpack/_packer.pyx"
    __pyx_t_15.nest_limit = (__pyx_v_nest_limit - 1);

#line 177 "msgpack/_packer.pyx"
    __pyx_t_12 = ((struct __pyx_vtabstruct_7msgpack_7_packer_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_o, &__pyx_t_15); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 177 "msgpack/_packer.pyx"
    __pyx_v_ret = __pyx_t_12;

#line 177 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 177 "msgpack/_packer.pyx"
  }

#line 177 "msgpack/_packer.pyx"
  /*else*/ {

    /* "msgpack/_packer.pyx":179
 *             ret = self._pack(o, nest_limit-1)
 *         else:
 *             raise TypeError("can't serialize %r" % (o,))             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */

#line 179 "msgpack/_packer.pyx"
    __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 179 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_13);

#line 179 "msgpack/_packer.pyx"
    __Pyx_INCREF(__pyx_v_o);

#line 179 "msgpack/_packer.pyx"
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v_o);

#line 179 "msgpack/_packer.pyx"
    __Pyx_GIVEREF(__pyx_v_o);

#line 179 "msgpack/_packer.pyx"
    __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_14), ((PyObject *)__pyx_t_13)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 179 "msgpack/_packer.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));

#line 179 "msgpack/_packer.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_13)); __pyx_t_13 = 0;

#line 179 "msgpack/_packer.pyx"
    __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 179 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_13);

#line 179 "msgpack/_packer.pyx"
    PyTuple_SET_ITEM(__pyx_t_13, 0, ((PyObject *)__pyx_t_3));

#line 179 "msgpack/_packer.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));

#line 179 "msgpack/_packer.pyx"
    __pyx_t_3 = 0;

#line 179 "msgpack/_packer.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_t_13), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 179 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 179 "msgpack/_packer.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_13)); __pyx_t_13 = 0;

#line 179 "msgpack/_packer.pyx"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 179 "msgpack/_packer.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 179 "msgpack/_packer.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 179 "msgpack/_packer.pyx"
  }

#line 179 "msgpack/_packer.pyx"
  __pyx_L4:;

  /* "msgpack/_packer.pyx":180
 *         else:
 *             raise TypeError("can't serialize %r" % (o,))
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     cpdef pack(self, object obj):
 */

#line 180 "msgpack/_packer.pyx"
  __pyx_r = __pyx_v_ret;

#line 180 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 180 "msgpack/_packer.pyx"


#line 180 "msgpack/_packer.pyx"
  __pyx_r = 0;

#line 180 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 180 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 180 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 180 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 180 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_13);

#line 180 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_17);

#line 180 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_18);

#line 180 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.Packer._pack", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 180 "msgpack/_packer.pyx"
  __pyx_r = -1;

#line 180 "msgpack/_packer.pyx"
  __pyx_L0:;

#line 180 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_v_d);

#line 180 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_v_k);

#line 180 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_v_v);

#line 180 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_v_o);

#line 180 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 180 "msgpack/_packer.pyx"
  return __pyx_r;

#line 180 "msgpack/_packer.pyx"
}

/* "msgpack/_packer.pyx":182
 *         return ret
 * 
 *     cpdef pack(self, object obj):             # <<<<<<<<<<<<<<
 *         cdef int ret
 *         ret = self._pack(obj, DEFAULT_RECURSE_LIMIT)
 */

#line 182 "msgpack/_packer.pyx"


#line 182 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_7pack(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/

#line 182 "msgpack/_packer.pyx"
static PyObject *__pyx_f_7msgpack_7_packer_6Packer_pack(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_skip_dispatch) {
  int __pyx_v_ret
#line 182 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_buf = NULL
#line 182 "msgpack/_packer.pyx"
;

#line 182 "msgpack/_packer.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  struct __pyx_opt_args_7msgpack_7_packer_6Packer__pack __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 182 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("pack", 0);

#line 182 "msgpack/_packer.pyx"
  /* Check if called by wrapper */

#line 182 "msgpack/_packer.pyx"
  if (unlikely(__pyx_skip_dispatch)) ;

#line 182 "msgpack/_packer.pyx"
  /* Check if overridden in Python */

#line 182 "msgpack/_packer.pyx"
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {

#line 182 "msgpack/_packer.pyx"
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__pack); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 182 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 182 "msgpack/_packer.pyx"
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7msgpack_7_packer_6Packer_7pack)) {

#line 182 "msgpack/_packer.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 182 "msgpack/_packer.pyx"
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 182 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 182 "msgpack/_packer.pyx"
      __Pyx_INCREF(__pyx_v_obj);

#line 182 "msgpack/_packer.pyx"
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_obj);

#line 182 "msgpack/_packer.pyx"
      __Pyx_GIVEREF(__pyx_v_obj);

#line 182 "msgpack/_packer.pyx"
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 182 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 182 "msgpack/_packer.pyx"
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 182 "msgpack/_packer.pyx"
      __pyx_r = __pyx_t_3;

#line 182 "msgpack/_packer.pyx"
      __pyx_t_3 = 0;

#line 182 "msgpack/_packer.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 182 "msgpack/_packer.pyx"
      goto __pyx_L0;

#line 182 "msgpack/_packer.pyx"
    }

#line 182 "msgpack/_packer.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 182 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":184
 *     cpdef pack(self, object obj):
 *         cdef int ret
 *         ret = self._pack(obj, DEFAULT_RECURSE_LIMIT)             # <<<<<<<<<<<<<<
 *         if ret == -1:
 *             raise MemoryError
 */

#line 184 "msgpack/_packer.pyx"
  __pyx_t_5.__pyx_n = 1;

#line 184 "msgpack/_packer.pyx"
  __pyx_t_5.nest_limit = __pyx_v_7msgpack_7_packer_DEFAULT_RECURSE_LIMIT;

#line 184 "msgpack/_packer.pyx"
  __pyx_t_4 = ((struct __pyx_vtabstruct_7msgpack_7_packer_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_obj, &__pyx_t_5); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 184 "msgpack/_packer.pyx"
  __pyx_v_ret = __pyx_t_4;

  /* "msgpack/_packer.pyx":185
 *         cdef int ret
 *         ret = self._pack(obj, DEFAULT_RECURSE_LIMIT)
 *         if ret == -1:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         elif ret:  # should not happen.
 */

#line 185 "msgpack/_packer.pyx"
  __pyx_t_6 = (__pyx_v_ret == -1);

#line 185 "msgpack/_packer.pyx"
  if (__pyx_t_6) {

    /* "msgpack/_packer.pyx":186
 *         ret = self._pack(obj, DEFAULT_RECURSE_LIMIT)
 *         if ret == -1:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *         elif ret:  # should not happen.
 *             raise TypeError
 */

#line 186 "msgpack/_packer.pyx"
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 186 "msgpack/_packer.pyx"
    goto __pyx_L3;

#line 186 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":187
 *         if ret == -1:
 *             raise MemoryError
 *         elif ret:  # should not happen.             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if self.autoreset:
 */

#line 187 "msgpack/_packer.pyx"
  if (__pyx_v_ret) {

    /* "msgpack/_packer.pyx":188
 *             raise MemoryError
 *         elif ret:  # should not happen.
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 */

#line 188 "msgpack/_packer.pyx"
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);

#line 188 "msgpack/_packer.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 188 "msgpack/_packer.pyx"
    goto __pyx_L3;

#line 188 "msgpack/_packer.pyx"
  }

#line 188 "msgpack/_packer.pyx"
  __pyx_L3:;

  /* "msgpack/_packer.pyx":189
 *         elif ret:  # should not happen.
 *             raise TypeError
 *         if self.autoreset:             # <<<<<<<<<<<<<<
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 */

#line 189 "msgpack/_packer.pyx"
  if (__pyx_v_self->autoreset) {

    /* "msgpack/_packer.pyx":190
 *             raise TypeError
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)             # <<<<<<<<<<<<<<
 *             self.pk.length = 0
 *             return buf
 */

#line 190 "msgpack/_packer.pyx"
    __pyx_t_1 = ((PyObject *)PyBytes_FromStringAndSize(__pyx_v_self->pk.buf, __pyx_v_self->pk.length)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 190 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 190 "msgpack/_packer.pyx"
    __pyx_v_buf = ((PyObject*)__pyx_t_1);

#line 190 "msgpack/_packer.pyx"
    __pyx_t_1 = 0;

    /* "msgpack/_packer.pyx":191
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0             # <<<<<<<<<<<<<<
 *             return buf
 * 
 */

#line 191 "msgpack/_packer.pyx"
    __pyx_v_self->pk.length = 0;

    /* "msgpack/_packer.pyx":192
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 *             return buf             # <<<<<<<<<<<<<<
 * 
 *     def pack_array_header(self, size_t size):
 */

#line 192 "msgpack/_packer.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 192 "msgpack/_packer.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_buf));

#line 192 "msgpack/_packer.pyx"
    __pyx_r = ((PyObject *)__pyx_v_buf);

#line 192 "msgpack/_packer.pyx"
    goto __pyx_L0;

#line 192 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 192 "msgpack/_packer.pyx"
  }

#line 192 "msgpack/_packer.pyx"
  __pyx_L4:;

#line 192 "msgpack/_packer.pyx"


#line 192 "msgpack/_packer.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 192 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 192 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 192 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 192 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 192 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 192 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.Packer.pack", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 192 "msgpack/_packer.pyx"
  __pyx_r = 0;

#line 192 "msgpack/_packer.pyx"
  __pyx_L0:;

#line 192 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_v_buf);

#line 192 "msgpack/_packer.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 192 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 192 "msgpack/_packer.pyx"
  return __pyx_r;

#line 192 "msgpack/_packer.pyx"
}

#line 192 "msgpack/_packer.pyx"


#line 192 "msgpack/_packer.pyx"
/* Python wrapper */

#line 192 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_7pack(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/

#line 192 "msgpack/_packer.pyx"
static char __pyx_doc_7msgpack_7_packer_6Packer_6pack[] = "Packer.pack(self, obj)";

#line 192 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_7pack(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {

#line 192 "msgpack/_packer.pyx"
  PyObject *__pyx_r = 0;

#line 192 "msgpack/_packer.pyx"
  __Pyx_RefNannyDeclarations

#line 192 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("pack (wrapper)", 0);
  __pyx_r = 
#line 192 "msgpack/_packer.pyx"
__pyx_pf_7msgpack_7_packer_6Packer_6pack(((struct __pyx_obj_7msgpack_7_packer_Packer *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

#line 192 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 192 "msgpack/_packer.pyx"
  return __pyx_r;

#line 192 "msgpack/_packer.pyx"
}

/* "msgpack/_packer.pyx":182
 *         return ret
 * 
 *     cpdef pack(self, object obj):             # <<<<<<<<<<<<<<
 *         cdef int ret
 *         ret = self._pack(obj, DEFAULT_RECURSE_LIMIT)
 */

#line 182 "msgpack/_packer.pyx"


#line 182 "msgpack/_packer.pyx"
static PyObject *__pyx_pf_7msgpack_7_packer_6Packer_6pack(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self, PyObject *__pyx_v_obj) {

#line 182 "msgpack/_packer.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 182 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("pack", 0);

#line 182 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 182 "msgpack/_packer.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_7msgpack_7_packer_Packer *)__pyx_v_self->__pyx_vtab)->pack(__pyx_v_self, __pyx_v_obj, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 182 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 182 "msgpack/_packer.pyx"
  __pyx_r = __pyx_t_1;

#line 182 "msgpack/_packer.pyx"
  __pyx_t_1 = 0;

#line 182 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 182 "msgpack/_packer.pyx"


#line 182 "msgpack/_packer.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 182 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 182 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 182 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 182 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.Packer.pack", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 182 "msgpack/_packer.pyx"
  __pyx_r = NULL;

#line 182 "msgpack/_packer.pyx"
  __pyx_L0:;

#line 182 "msgpack/_packer.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 182 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 182 "msgpack/_packer.pyx"
  return __pyx_r;

#line 182 "msgpack/_packer.pyx"
}

#line 182 "msgpack/_packer.pyx"


#line 182 "msgpack/_packer.pyx"
/* Python wrapper */

#line 182 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_9pack_array_header(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/

#line 182 "msgpack/_packer.pyx"
static char __pyx_doc_7msgpack_7_packer_6Packer_8pack_array_header[] = "Packer.pack_array_header(self, size_t size)";

#line 182 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_9pack_array_header(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size
#line 182 "msgpack/_packer.pyx"
;

#line 182 "msgpack/_packer.pyx"
  PyObject *__pyx_r = 0;

#line 182 "msgpack/_packer.pyx"
  __Pyx_RefNannyDeclarations

#line 182 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("pack_array_header (wrapper)", 0);

#line 182 "msgpack/_packer.pyx"
  assert(__pyx_arg_size); {

#line 182 "msgpack/_packer.pyx"
    __pyx_v_size = __Pyx_PyInt_AsSize_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 182 "msgpack/_packer.pyx"
  }

#line 182 "msgpack/_packer.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 182 "msgpack/_packer.pyx"
  __pyx_L3_error:;

#line 182 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.Packer.pack_array_header", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 182 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 182 "msgpack/_packer.pyx"
  return NULL;

#line 182 "msgpack/_packer.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 182 "msgpack/_packer.pyx"
__pyx_pf_7msgpack_7_packer_6Packer_8pack_array_header(((struct __pyx_obj_7msgpack_7_packer_Packer *)__pyx_v_self), ((size_t)__pyx_v_size));

#line 182 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 182 "msgpack/_packer.pyx"
  return __pyx_r;

#line 182 "msgpack/_packer.pyx"
}

/* "msgpack/_packer.pyx":194
 *             return buf
 * 
 *     def pack_array_header(self, size_t size):             # <<<<<<<<<<<<<<
 *         cdef int ret = msgpack_pack_array(&self.pk, size)
 *         if ret == -1:
 */

#line 194 "msgpack/_packer.pyx"


#line 194 "msgpack/_packer.pyx"
static PyObject *__pyx_pf_7msgpack_7_packer_6Packer_8pack_array_header(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self, size_t __pyx_v_size) {
  int __pyx_v_ret
#line 194 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_buf = NULL
#line 194 "msgpack/_packer.pyx"
;

#line 194 "msgpack/_packer.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 194 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("pack_array_header", 0);

  /* "msgpack/_packer.pyx":195
 * 
 *     def pack_array_header(self, size_t size):
 *         cdef int ret = msgpack_pack_array(&self.pk, size)             # <<<<<<<<<<<<<<
 *         if ret == -1:
 *             raise MemoryError
 */

#line 195 "msgpack/_packer.pyx"
  __pyx_v_ret = msgpack_pack_array((&__pyx_v_self->pk), __pyx_v_size);

  /* "msgpack/_packer.pyx":196
 *     def pack_array_header(self, size_t size):
 *         cdef int ret = msgpack_pack_array(&self.pk, size)
 *         if ret == -1:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         elif ret:  # should not happen
 */

#line 196 "msgpack/_packer.pyx"
  __pyx_t_1 = (__pyx_v_ret == -1);

#line 196 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":197
 *         cdef int ret = msgpack_pack_array(&self.pk, size)
 *         if ret == -1:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *         elif ret:  # should not happen
 *             raise TypeError
 */

#line 197 "msgpack/_packer.pyx"
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 197 "msgpack/_packer.pyx"
    goto __pyx_L3;

#line 197 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":198
 *         if ret == -1:
 *             raise MemoryError
 *         elif ret:  # should not happen             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if self.autoreset:
 */

#line 198 "msgpack/_packer.pyx"
  if (__pyx_v_ret) {

    /* "msgpack/_packer.pyx":199
 *             raise MemoryError
 *         elif ret:  # should not happen
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 */

#line 199 "msgpack/_packer.pyx"
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);

#line 199 "msgpack/_packer.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 199 "msgpack/_packer.pyx"
    goto __pyx_L3;

#line 199 "msgpack/_packer.pyx"
  }

#line 199 "msgpack/_packer.pyx"
  __pyx_L3:;

  /* "msgpack/_packer.pyx":200
 *         elif ret:  # should not happen
 *             raise TypeError
 *         if self.autoreset:             # <<<<<<<<<<<<<<
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 */

#line 200 "msgpack/_packer.pyx"
  if (__pyx_v_self->autoreset) {

    /* "msgpack/_packer.pyx":201
 *             raise TypeError
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)             # <<<<<<<<<<<<<<
 *             self.pk.length = 0
 *             return buf
 */

#line 201 "msgpack/_packer.pyx"
    __pyx_t_2 = ((PyObject *)PyBytes_FromStringAndSize(__pyx_v_self->pk.buf, __pyx_v_self->pk.length)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 201 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 201 "msgpack/_packer.pyx"
    __pyx_v_buf = ((PyObject*)__pyx_t_2);

#line 201 "msgpack/_packer.pyx"
    __pyx_t_2 = 0;

    /* "msgpack/_packer.pyx":202
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0             # <<<<<<<<<<<<<<
 *             return buf
 * 
 */

#line 202 "msgpack/_packer.pyx"
    __pyx_v_self->pk.length = 0;

    /* "msgpack/_packer.pyx":203
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 *             return buf             # <<<<<<<<<<<<<<
 * 
 *     def pack_map_header(self, size_t size):
 */

#line 203 "msgpack/_packer.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 203 "msgpack/_packer.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_buf));

#line 203 "msgpack/_packer.pyx"
    __pyx_r = ((PyObject *)__pyx_v_buf);

#line 203 "msgpack/_packer.pyx"
    goto __pyx_L0;

#line 203 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 203 "msgpack/_packer.pyx"
  }

#line 203 "msgpack/_packer.pyx"
  __pyx_L4:;

#line 203 "msgpack/_packer.pyx"


#line 203 "msgpack/_packer.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 203 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 203 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 203 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 203 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.Packer.pack_array_header", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 203 "msgpack/_packer.pyx"
  __pyx_r = NULL;

#line 203 "msgpack/_packer.pyx"
  __pyx_L0:;

#line 203 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_v_buf);

#line 203 "msgpack/_packer.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 203 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 203 "msgpack/_packer.pyx"
  return __pyx_r;

#line 203 "msgpack/_packer.pyx"
}

#line 203 "msgpack/_packer.pyx"


#line 203 "msgpack/_packer.pyx"
/* Python wrapper */

#line 203 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_11pack_map_header(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/

#line 203 "msgpack/_packer.pyx"
static char __pyx_doc_7msgpack_7_packer_6Packer_10pack_map_header[] = "Packer.pack_map_header(self, size_t size)";

#line 203 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_11pack_map_header(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  size_t __pyx_v_size
#line 203 "msgpack/_packer.pyx"
;

#line 203 "msgpack/_packer.pyx"
  PyObject *__pyx_r = 0;

#line 203 "msgpack/_packer.pyx"
  __Pyx_RefNannyDeclarations

#line 203 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("pack_map_header (wrapper)", 0);

#line 203 "msgpack/_packer.pyx"
  assert(__pyx_arg_size); {

#line 203 "msgpack/_packer.pyx"
    __pyx_v_size = __Pyx_PyInt_AsSize_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 203 "msgpack/_packer.pyx"
  }

#line 203 "msgpack/_packer.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 203 "msgpack/_packer.pyx"
  __pyx_L3_error:;

#line 203 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.Packer.pack_map_header", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 203 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 203 "msgpack/_packer.pyx"
  return NULL;

#line 203 "msgpack/_packer.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 203 "msgpack/_packer.pyx"
__pyx_pf_7msgpack_7_packer_6Packer_10pack_map_header(((struct __pyx_obj_7msgpack_7_packer_Packer *)__pyx_v_self), ((size_t)__pyx_v_size));

#line 203 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 203 "msgpack/_packer.pyx"
  return __pyx_r;

#line 203 "msgpack/_packer.pyx"
}

/* "msgpack/_packer.pyx":205
 *             return buf
 * 
 *     def pack_map_header(self, size_t size):             # <<<<<<<<<<<<<<
 *         cdef int ret = msgpack_pack_map(&self.pk, size)
 *         if ret == -1:
 */

#line 205 "msgpack/_packer.pyx"


#line 205 "msgpack/_packer.pyx"
static PyObject *__pyx_pf_7msgpack_7_packer_6Packer_10pack_map_header(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self, size_t __pyx_v_size) {
  int __pyx_v_ret
#line 205 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_buf = NULL
#line 205 "msgpack/_packer.pyx"
;

#line 205 "msgpack/_packer.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 205 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("pack_map_header", 0);

  /* "msgpack/_packer.pyx":206
 * 
 *     def pack_map_header(self, size_t size):
 *         cdef int ret = msgpack_pack_map(&self.pk, size)             # <<<<<<<<<<<<<<
 *         if ret == -1:
 *             raise MemoryError
 */

#line 206 "msgpack/_packer.pyx"
  __pyx_v_ret = msgpack_pack_map((&__pyx_v_self->pk), __pyx_v_size);

  /* "msgpack/_packer.pyx":207
 *     def pack_map_header(self, size_t size):
 *         cdef int ret = msgpack_pack_map(&self.pk, size)
 *         if ret == -1:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         elif ret:  # should not happen
 */

#line 207 "msgpack/_packer.pyx"
  __pyx_t_1 = (__pyx_v_ret == -1);

#line 207 "msgpack/_packer.pyx"
  if (__pyx_t_1) {

    /* "msgpack/_packer.pyx":208
 *         cdef int ret = msgpack_pack_map(&self.pk, size)
 *         if ret == -1:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *         elif ret:  # should not happen
 *             raise TypeError
 */

#line 208 "msgpack/_packer.pyx"
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 208 "msgpack/_packer.pyx"
    goto __pyx_L3;

#line 208 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":209
 *         if ret == -1:
 *             raise MemoryError
 *         elif ret:  # should not happen             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if self.autoreset:
 */

#line 209 "msgpack/_packer.pyx"
  if (__pyx_v_ret) {

    /* "msgpack/_packer.pyx":210
 *             raise MemoryError
 *         elif ret:  # should not happen
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 */

#line 210 "msgpack/_packer.pyx"
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);

#line 210 "msgpack/_packer.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 210 "msgpack/_packer.pyx"
    goto __pyx_L3;

#line 210 "msgpack/_packer.pyx"
  }

#line 210 "msgpack/_packer.pyx"
  __pyx_L3:;

  /* "msgpack/_packer.pyx":211
 *         elif ret:  # should not happen
 *             raise TypeError
 *         if self.autoreset:             # <<<<<<<<<<<<<<
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 */

#line 211 "msgpack/_packer.pyx"
  if (__pyx_v_self->autoreset) {

    /* "msgpack/_packer.pyx":212
 *             raise TypeError
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)             # <<<<<<<<<<<<<<
 *             self.pk.length = 0
 *             return buf
 */

#line 212 "msgpack/_packer.pyx"
    __pyx_t_2 = ((PyObject *)PyBytes_FromStringAndSize(__pyx_v_self->pk.buf, __pyx_v_self->pk.length)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 212 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 212 "msgpack/_packer.pyx"
    __pyx_v_buf = ((PyObject*)__pyx_t_2);

#line 212 "msgpack/_packer.pyx"
    __pyx_t_2 = 0;

    /* "msgpack/_packer.pyx":213
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0             # <<<<<<<<<<<<<<
 *             return buf
 * 
 */

#line 213 "msgpack/_packer.pyx"
    __pyx_v_self->pk.length = 0;

    /* "msgpack/_packer.pyx":214
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 *             return buf             # <<<<<<<<<<<<<<
 * 
 *     def pack_map_pairs(self, object pairs):
 */

#line 214 "msgpack/_packer.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 214 "msgpack/_packer.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_buf));

#line 214 "msgpack/_packer.pyx"
    __pyx_r = ((PyObject *)__pyx_v_buf);

#line 214 "msgpack/_packer.pyx"
    goto __pyx_L0;

#line 214 "msgpack/_packer.pyx"
    goto __pyx_L4;

#line 214 "msgpack/_packer.pyx"
  }

#line 214 "msgpack/_packer.pyx"
  __pyx_L4:;

#line 214 "msgpack/_packer.pyx"


#line 214 "msgpack/_packer.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 214 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 214 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 214 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 214 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.Packer.pack_map_header", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 214 "msgpack/_packer.pyx"
  __pyx_r = NULL;

#line 214 "msgpack/_packer.pyx"
  __pyx_L0:;

#line 214 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_v_buf);

#line 214 "msgpack/_packer.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 214 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 214 "msgpack/_packer.pyx"
  return __pyx_r;

#line 214 "msgpack/_packer.pyx"
}

#line 214 "msgpack/_packer.pyx"


#line 214 "msgpack/_packer.pyx"
/* Python wrapper */

#line 214 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_13pack_map_pairs(PyObject *__pyx_v_self, PyObject *__pyx_v_pairs); /*proto*/

#line 214 "msgpack/_packer.pyx"
static char __pyx_doc_7msgpack_7_packer_6Packer_12pack_map_pairs[] = "Packer.pack_map_pairs(self, pairs)\n\n        Pack *pairs* as msgpack map type.\n\n        *pairs* should sequence of pair.\n        (`len(pairs)` and `for k, v in *pairs*:` should be supported.)\n        ";

#line 214 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_13pack_map_pairs(PyObject *__pyx_v_self, PyObject *__pyx_v_pairs) {

#line 214 "msgpack/_packer.pyx"
  PyObject *__pyx_r = 0;

#line 214 "msgpack/_packer.pyx"
  __Pyx_RefNannyDeclarations

#line 214 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("pack_map_pairs (wrapper)", 0);
  __pyx_r = 
#line 214 "msgpack/_packer.pyx"
__pyx_pf_7msgpack_7_packer_6Packer_12pack_map_pairs(((struct __pyx_obj_7msgpack_7_packer_Packer *)__pyx_v_self), ((PyObject *)__pyx_v_pairs));

#line 214 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 214 "msgpack/_packer.pyx"
  return __pyx_r;

#line 214 "msgpack/_packer.pyx"
}

/* "msgpack/_packer.pyx":216
 *             return buf
 * 
 *     def pack_map_pairs(self, object pairs):             # <<<<<<<<<<<<<<
 *         """
 *         Pack *pairs* as msgpack map type.
 */

#line 216 "msgpack/_packer.pyx"


#line 216 "msgpack/_packer.pyx"
static PyObject *__pyx_pf_7msgpack_7_packer_6Packer_12pack_map_pairs(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self, PyObject *__pyx_v_pairs) {
  int __pyx_v_ret
#line 216 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_k = NULL
#line 216 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_v = NULL
#line 216 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_buf = NULL
#line 216 "msgpack/_packer.pyx"
;

#line 216 "msgpack/_packer.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 216 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("pack_map_pairs", 0);

  /* "msgpack/_packer.pyx":223
 *         (`len(pairs)` and `for k, v in *pairs*:` should be supported.)
 *         """
 *         cdef int ret = msgpack_pack_map(&self.pk, len(pairs))             # <<<<<<<<<<<<<<
 *         if ret == 0:
 *             for k, v in pairs:
 */

#line 223 "msgpack/_packer.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_pairs); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 223 "msgpack/_packer.pyx"
  __pyx_v_ret = msgpack_pack_map((&__pyx_v_self->pk), __pyx_t_1);

  /* "msgpack/_packer.pyx":224
 *         """
 *         cdef int ret = msgpack_pack_map(&self.pk, len(pairs))
 *         if ret == 0:             # <<<<<<<<<<<<<<
 *             for k, v in pairs:
 *                 ret = self._pack(k)
 */

#line 224 "msgpack/_packer.pyx"
  __pyx_t_2 = (__pyx_v_ret == 0);

#line 224 "msgpack/_packer.pyx"
  if (__pyx_t_2) {

    /* "msgpack/_packer.pyx":225
 *         cdef int ret = msgpack_pack_map(&self.pk, len(pairs))
 *         if ret == 0:
 *             for k, v in pairs:             # <<<<<<<<<<<<<<
 *                 ret = self._pack(k)
 *                 if ret != 0: break
 */

#line 225 "msgpack/_packer.pyx"
    if (PyList_CheckExact(__pyx_v_pairs) || PyTuple_CheckExact(__pyx_v_pairs)) {

#line 225 "msgpack/_packer.pyx"
      __pyx_t_3 = __pyx_v_pairs; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;

#line 225 "msgpack/_packer.pyx"
      __pyx_t_4 = NULL;

#line 225 "msgpack/_packer.pyx"
    } else {
      __pyx_t_1 = -1; 
#line 225 "msgpack/_packer.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_v_pairs); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "msgpack/_packer.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 225 "msgpack/_packer.pyx"
      __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;

#line 225 "msgpack/_packer.pyx"
    }

#line 225 "msgpack/_packer.pyx"
    for (;;) {

#line 225 "msgpack/_packer.pyx"
      if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_3)) {

#line 225 "msgpack/_packer.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 225 "msgpack/_packer.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 225 "msgpack/_packer.pyx"
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "msgpack/_packer.pyx"
        #else

#line 225 "msgpack/_packer.pyx"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "msgpack/_packer.pyx"
        #endif
      } else 
#line 225 "msgpack/_packer.pyx"
if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_3)) {

#line 225 "msgpack/_packer.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 225 "msgpack/_packer.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 225 "msgpack/_packer.pyx"
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "msgpack/_packer.pyx"
        #else

#line 225 "msgpack/_packer.pyx"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "msgpack/_packer.pyx"
        #endif
      } else 
#line 225 "msgpack/_packer.pyx"
{

#line 225 "msgpack/_packer.pyx"
        __pyx_t_5 = __pyx_t_4(__pyx_t_3);

#line 225 "msgpack/_packer.pyx"
        if (unlikely(!__pyx_t_5)) {

#line 225 "msgpack/_packer.pyx"
          if (PyErr_Occurred()) {

#line 225 "msgpack/_packer.pyx"
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();

#line 225 "msgpack/_packer.pyx"
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "msgpack/_packer.pyx"
          }

#line 225 "msgpack/_packer.pyx"
          break;

#line 225 "msgpack/_packer.pyx"
        }

#line 225 "msgpack/_packer.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 225 "msgpack/_packer.pyx"
      }

#line 225 "msgpack/_packer.pyx"
      if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {

#line 225 "msgpack/_packer.pyx"
        PyObject* sequence = __pyx_t_5;

#line 225 "msgpack/_packer.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 225 "msgpack/_packer.pyx"
        Py_ssize_t size = Py_SIZE(sequence);

#line 225 "msgpack/_packer.pyx"
        #else

#line 225 "msgpack/_packer.pyx"
        Py_ssize_t size = PySequence_Size(sequence);

#line 225 "msgpack/_packer.pyx"
        #endif

#line 225 "msgpack/_packer.pyx"
        if (unlikely(size != 2)) {

#line 225 "msgpack/_packer.pyx"
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 225 "msgpack/_packer.pyx"
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 225 "msgpack/_packer.pyx"
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "msgpack/_packer.pyx"
        }

#line 225 "msgpack/_packer.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 225 "msgpack/_packer.pyx"
        if (likely(PyTuple_CheckExact(sequence))) {

#line 225 "msgpack/_packer.pyx"
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 

#line 225 "msgpack/_packer.pyx"
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 

#line 225 "msgpack/_packer.pyx"
        } else {

#line 225 "msgpack/_packer.pyx"
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 

#line 225 "msgpack/_packer.pyx"
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 

#line 225 "msgpack/_packer.pyx"
        }

#line 225 "msgpack/_packer.pyx"
        __Pyx_INCREF(__pyx_t_6);

#line 225 "msgpack/_packer.pyx"
        __Pyx_INCREF(__pyx_t_7);

#line 225 "msgpack/_packer.pyx"
        #else

#line 225 "msgpack/_packer.pyx"
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "msgpack/_packer.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 225 "msgpack/_packer.pyx"
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "msgpack/_packer.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 225 "msgpack/_packer.pyx"
        #endif

#line 225 "msgpack/_packer.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 225 "msgpack/_packer.pyx"
      } else

#line 225 "msgpack/_packer.pyx"
      {

#line 225 "msgpack/_packer.pyx"
        Py_ssize_t index = -1;

#line 225 "msgpack/_packer.pyx"
        __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "msgpack/_packer.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 225 "msgpack/_packer.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 225 "msgpack/_packer.pyx"
        __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
        index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) 
#line 225 "msgpack/_packer.pyx"
goto __pyx_L6_unpacking_failed;

#line 225 "msgpack/_packer.pyx"
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) 
#line 225 "msgpack/_packer.pyx"
goto __pyx_L6_unpacking_failed;

#line 225 "msgpack/_packer.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 225 "msgpack/_packer.pyx"
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "msgpack/_packer.pyx"
        __pyx_t_9 = NULL;

#line 225 "msgpack/_packer.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 225 "msgpack/_packer.pyx"
        goto __pyx_L7_unpacking_done;

#line 225 "msgpack/_packer.pyx"
        __pyx_L6_unpacking_failed:;

#line 225 "msgpack/_packer.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 225 "msgpack/_packer.pyx"
        __pyx_t_9 = NULL;

#line 225 "msgpack/_packer.pyx"
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 225 "msgpack/_packer.pyx"
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "msgpack/_packer.pyx"
        __pyx_L7_unpacking_done:;

#line 225 "msgpack/_packer.pyx"
      }

#line 225 "msgpack/_packer.pyx"
      __Pyx_XDECREF(__pyx_v_k);

#line 225 "msgpack/_packer.pyx"
      __pyx_v_k = __pyx_t_6;

#line 225 "msgpack/_packer.pyx"
      __pyx_t_6 = 0;

#line 225 "msgpack/_packer.pyx"
      __Pyx_XDECREF(__pyx_v_v);

#line 225 "msgpack/_packer.pyx"
      __pyx_v_v = __pyx_t_7;

#line 225 "msgpack/_packer.pyx"
      __pyx_t_7 = 0;

      /* "msgpack/_packer.pyx":226
 *         if ret == 0:
 *             for k, v in pairs:
 *                 ret = self._pack(k)             # <<<<<<<<<<<<<<
 *                 if ret != 0: break
 *                 ret = self._pack(v)
 */

#line 226 "msgpack/_packer.pyx"
      __pyx_t_10 = ((struct __pyx_vtabstruct_7msgpack_7_packer_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_k, NULL); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 226 "msgpack/_packer.pyx"
      __pyx_v_ret = __pyx_t_10;

      /* "msgpack/_packer.pyx":227
 *             for k, v in pairs:
 *                 ret = self._pack(k)
 *                 if ret != 0: break             # <<<<<<<<<<<<<<
 *                 ret = self._pack(v)
 *                 if ret != 0: break
 */

#line 227 "msgpack/_packer.pyx"
      __pyx_t_2 = (__pyx_v_ret != 0);

#line 227 "msgpack/_packer.pyx"
      if (__pyx_t_2) {

#line 227 "msgpack/_packer.pyx"
        goto __pyx_L5_break;

#line 227 "msgpack/_packer.pyx"
        goto __pyx_L8;

#line 227 "msgpack/_packer.pyx"
      }

#line 227 "msgpack/_packer.pyx"
      __pyx_L8:;

      /* "msgpack/_packer.pyx":228
 *                 ret = self._pack(k)
 *                 if ret != 0: break
 *                 ret = self._pack(v)             # <<<<<<<<<<<<<<
 *                 if ret != 0: break
 *         if ret == -1:
 */

#line 228 "msgpack/_packer.pyx"
      __pyx_t_10 = ((struct __pyx_vtabstruct_7msgpack_7_packer_Packer *)__pyx_v_self->__pyx_vtab)->_pack(__pyx_v_self, __pyx_v_v, NULL); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 228 "msgpack/_packer.pyx"
      __pyx_v_ret = __pyx_t_10;

      /* "msgpack/_packer.pyx":229
 *                 if ret != 0: break
 *                 ret = self._pack(v)
 *                 if ret != 0: break             # <<<<<<<<<<<<<<
 *         if ret == -1:
 *             raise MemoryError
 */

#line 229 "msgpack/_packer.pyx"
      __pyx_t_2 = (__pyx_v_ret != 0);

#line 229 "msgpack/_packer.pyx"
      if (__pyx_t_2) {

#line 229 "msgpack/_packer.pyx"
        goto __pyx_L5_break;

#line 229 "msgpack/_packer.pyx"
        goto __pyx_L9;

#line 229 "msgpack/_packer.pyx"
      }

#line 229 "msgpack/_packer.pyx"
      __pyx_L9:;

#line 229 "msgpack/_packer.pyx"
    }

#line 229 "msgpack/_packer.pyx"
    __pyx_L5_break:;

#line 229 "msgpack/_packer.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 229 "msgpack/_packer.pyx"
    goto __pyx_L3;

#line 229 "msgpack/_packer.pyx"
  }

#line 229 "msgpack/_packer.pyx"
  __pyx_L3:;

  /* "msgpack/_packer.pyx":230
 *                 ret = self._pack(v)
 *                 if ret != 0: break
 *         if ret == -1:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         elif ret:  # should not happen
 */

#line 230 "msgpack/_packer.pyx"
  __pyx_t_2 = (__pyx_v_ret == -1);

#line 230 "msgpack/_packer.pyx"
  if (__pyx_t_2) {

    /* "msgpack/_packer.pyx":231
 *                 if ret != 0: break
 *         if ret == -1:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *         elif ret:  # should not happen
 *             raise TypeError
 */

#line 231 "msgpack/_packer.pyx"
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 231 "msgpack/_packer.pyx"
    goto __pyx_L10;

#line 231 "msgpack/_packer.pyx"
  }

  /* "msgpack/_packer.pyx":232
 *         if ret == -1:
 *             raise MemoryError
 *         elif ret:  # should not happen             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         if self.autoreset:
 */

#line 232 "msgpack/_packer.pyx"
  if (__pyx_v_ret) {

    /* "msgpack/_packer.pyx":233
 *             raise MemoryError
 *         elif ret:  # should not happen
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 */

#line 233 "msgpack/_packer.pyx"
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);

#line 233 "msgpack/_packer.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 233 "msgpack/_packer.pyx"
    goto __pyx_L10;

#line 233 "msgpack/_packer.pyx"
  }

#line 233 "msgpack/_packer.pyx"
  __pyx_L10:;

  /* "msgpack/_packer.pyx":234
 *         elif ret:  # should not happen
 *             raise TypeError
 *         if self.autoreset:             # <<<<<<<<<<<<<<
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 */

#line 234 "msgpack/_packer.pyx"
  if (__pyx_v_self->autoreset) {

    /* "msgpack/_packer.pyx":235
 *             raise TypeError
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)             # <<<<<<<<<<<<<<
 *             self.pk.length = 0
 *             return buf
 */

#line 235 "msgpack/_packer.pyx"
    __pyx_t_3 = ((PyObject *)PyBytes_FromStringAndSize(__pyx_v_self->pk.buf, __pyx_v_self->pk.length)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 235 "msgpack/_packer.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 235 "msgpack/_packer.pyx"
    __pyx_v_buf = ((PyObject*)__pyx_t_3);

#line 235 "msgpack/_packer.pyx"
    __pyx_t_3 = 0;

    /* "msgpack/_packer.pyx":236
 *         if self.autoreset:
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0             # <<<<<<<<<<<<<<
 *             return buf
 * 
 */

#line 236 "msgpack/_packer.pyx"
    __pyx_v_self->pk.length = 0;

    /* "msgpack/_packer.pyx":237
 *             buf = PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 *             self.pk.length = 0
 *             return buf             # <<<<<<<<<<<<<<
 * 
 *     def reset(self):
 */

#line 237 "msgpack/_packer.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 237 "msgpack/_packer.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_buf));

#line 237 "msgpack/_packer.pyx"
    __pyx_r = ((PyObject *)__pyx_v_buf);

#line 237 "msgpack/_packer.pyx"
    goto __pyx_L0;

#line 237 "msgpack/_packer.pyx"
    goto __pyx_L11;

#line 237 "msgpack/_packer.pyx"
  }

#line 237 "msgpack/_packer.pyx"
  __pyx_L11:;

#line 237 "msgpack/_packer.pyx"


#line 237 "msgpack/_packer.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 237 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 237 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 237 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 237 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 237 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 237 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 237 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 237 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.Packer.pack_map_pairs", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 237 "msgpack/_packer.pyx"
  __pyx_r = NULL;

#line 237 "msgpack/_packer.pyx"
  __pyx_L0:;

#line 237 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_v_k);

#line 237 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_v_v);

#line 237 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_v_buf);

#line 237 "msgpack/_packer.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 237 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 237 "msgpack/_packer.pyx"
  return __pyx_r;

#line 237 "msgpack/_packer.pyx"
}

#line 237 "msgpack/_packer.pyx"


#line 237 "msgpack/_packer.pyx"
/* Python wrapper */

#line 237 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_15reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 237 "msgpack/_packer.pyx"
static char __pyx_doc_7msgpack_7_packer_6Packer_14reset[] = "Packer.reset(self)\nClear internal buffer.";

#line 237 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_15reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 237 "msgpack/_packer.pyx"
  PyObject *__pyx_r = 0;

#line 237 "msgpack/_packer.pyx"
  __Pyx_RefNannyDeclarations

#line 237 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  __pyx_r = 
#line 237 "msgpack/_packer.pyx"
__pyx_pf_7msgpack_7_packer_6Packer_14reset(((struct __pyx_obj_7msgpack_7_packer_Packer *)__pyx_v_self));

#line 237 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 237 "msgpack/_packer.pyx"
  return __pyx_r;

#line 237 "msgpack/_packer.pyx"
}

/* "msgpack/_packer.pyx":239
 *             return buf
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         """Clear internal buffer."""
 *         self.pk.length = 0
 */

#line 239 "msgpack/_packer.pyx"


#line 239 "msgpack/_packer.pyx"
static PyObject *__pyx_pf_7msgpack_7_packer_6Packer_14reset(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self) {

#line 239 "msgpack/_packer.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 239 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("reset", 0);

  /* "msgpack/_packer.pyx":241
 *     def reset(self):
 *         """Clear internal buffer."""
 *         self.pk.length = 0             # <<<<<<<<<<<<<<
 * 
 *     def bytes(self):
 */

#line 241 "msgpack/_packer.pyx"
  __pyx_v_self->pk.length = 0;

#line 241 "msgpack/_packer.pyx"


#line 241 "msgpack/_packer.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 241 "msgpack/_packer.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 241 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 241 "msgpack/_packer.pyx"
  return __pyx_r;

#line 241 "msgpack/_packer.pyx"
}

#line 241 "msgpack/_packer.pyx"


#line 241 "msgpack/_packer.pyx"
/* Python wrapper */

#line 241 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_17bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 241 "msgpack/_packer.pyx"
static char __pyx_doc_7msgpack_7_packer_6Packer_16bytes[] = "Packer.bytes(self)\nReturn buffer content.";

#line 241 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_6Packer_17bytes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 241 "msgpack/_packer.pyx"
  PyObject *__pyx_r = 0;

#line 241 "msgpack/_packer.pyx"
  __Pyx_RefNannyDeclarations

#line 241 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("bytes (wrapper)", 0);
  __pyx_r = 
#line 241 "msgpack/_packer.pyx"
__pyx_pf_7msgpack_7_packer_6Packer_16bytes(((struct __pyx_obj_7msgpack_7_packer_Packer *)__pyx_v_self));

#line 241 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 241 "msgpack/_packer.pyx"
  return __pyx_r;

#line 241 "msgpack/_packer.pyx"
}

/* "msgpack/_packer.pyx":243
 *         self.pk.length = 0
 * 
 *     def bytes(self):             # <<<<<<<<<<<<<<
 *         """Return buffer content."""
 *         return PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)
 */

#line 243 "msgpack/_packer.pyx"


#line 243 "msgpack/_packer.pyx"
static PyObject *__pyx_pf_7msgpack_7_packer_6Packer_16bytes(struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_self) {

#line 243 "msgpack/_packer.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 243 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("bytes", 0);

  /* "msgpack/_packer.pyx":245
 *     def bytes(self):
 *         """Return buffer content."""
 *         return PyBytes_FromStringAndSize(self.pk.buf, self.pk.length)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 245 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 245 "msgpack/_packer.pyx"
  __pyx_t_1 = ((PyObject *)PyBytes_FromStringAndSize(__pyx_v_self->pk.buf, __pyx_v_self->pk.length)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 245 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 245 "msgpack/_packer.pyx"
  __pyx_r = __pyx_t_1;

#line 245 "msgpack/_packer.pyx"
  __pyx_t_1 = 0;

#line 245 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 245 "msgpack/_packer.pyx"


#line 245 "msgpack/_packer.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 245 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 245 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 245 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 245 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.Packer.bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 245 "msgpack/_packer.pyx"
  __pyx_r = NULL;

#line 245 "msgpack/_packer.pyx"
  __pyx_L0:;

#line 245 "msgpack/_packer.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 245 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 245 "msgpack/_packer.pyx"
  return __pyx_r;

#line 245 "msgpack/_packer.pyx"
}

#line 245 "msgpack/_packer.pyx"


#line 245 "msgpack/_packer.pyx"
/* Python wrapper */

#line 245 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_1pack(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 245 "msgpack/_packer.pyx"
static char __pyx_doc_7msgpack_7_packer_pack[] = "pack(o, stream, default=None, encoding='utf-8', unicode_errors='strict')\n\n    pack an object `o` and write it to stream).";
static PyMethodDef __pyx_mdef_7msgpack_7_packer_1pack = 
#line 245 "msgpack/_packer.pyx"
{__Pyx_NAMESTR("pack"), (PyCFunction)__pyx_pw_7msgpack_7_packer_1pack, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7msgpack_7_packer_pack)};

#line 245 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_1pack(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_o = 0
#line 245 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_stream = 0
#line 245 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_default = 0
#line 245 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_encoding = 0
#line 245 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_unicode_errors = 0
#line 245 "msgpack/_packer.pyx"
;

#line 245 "msgpack/_packer.pyx"
  PyObject *__pyx_r = 0;

#line 245 "msgpack/_packer.pyx"
  __Pyx_RefNannyDeclarations

#line 245 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("pack (wrapper)", 0);

#line 245 "msgpack/_packer.pyx"
  {

#line 245 "msgpack/_packer.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__o,&__pyx_n_s__stream,&__pyx_n_s__default,&__pyx_n_s__encoding,&__pyx_n_s__unicode_errors,0};

#line 245 "msgpack/_packer.pyx"
    PyObject* values[5] = {0,0,0,0,0};

    /* "msgpack/_packer.pyx":248
 * 
 * 
 * def pack(object o, object stream, default=None, encoding='utf-8', unicode_errors='strict'):             # <<<<<<<<<<<<<<
 *     """
 *     pack an object `o` and write it to stream)."""
 */

#line 248 "msgpack/_packer.pyx"
    values[2] = ((PyObject *)Py_None);

#line 248 "msgpack/_packer.pyx"
    values[3] = ((PyObject *)__pyx_kp_s_3);

#line 248 "msgpack/_packer.pyx"
    values[4] = ((PyObject *)__pyx_n_s__strict);

#line 248 "msgpack/_packer.pyx"
    if (unlikely(__pyx_kwds)) {

#line 248 "msgpack/_packer.pyx"
      Py_ssize_t kw_args;

#line 248 "msgpack/_packer.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 248 "msgpack/_packer.pyx"
      switch (pos_args) {
        case  5: 
#line 248 "msgpack/_packer.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 248 "msgpack/_packer.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 248 "msgpack/_packer.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 248 "msgpack/_packer.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 248 "msgpack/_packer.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 248 "msgpack/_packer.pyx"
        case  0: break;
        default: 
#line 248 "msgpack/_packer.pyx"
goto __pyx_L5_argtuple_error;

#line 248 "msgpack/_packer.pyx"
      }

#line 248 "msgpack/_packer.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 248 "msgpack/_packer.pyx"
      switch (pos_args) {

#line 248 "msgpack/_packer.pyx"
        case  0:

#line 248 "msgpack/_packer.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__o)) != 0)) kw_args--;
        else 
#line 248 "msgpack/_packer.pyx"
goto __pyx_L5_argtuple_error;

#line 248 "msgpack/_packer.pyx"
        case  1:

#line 248 "msgpack/_packer.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__stream)) != 0)) kw_args--;

#line 248 "msgpack/_packer.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("pack", 0, 2, 5, 1); 
#line 248 "msgpack/_packer.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 248 "msgpack/_packer.pyx"
        }

#line 248 "msgpack/_packer.pyx"
        case  2:

#line 248 "msgpack/_packer.pyx"
        if (kw_args > 0) {

#line 248 "msgpack/_packer.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__default);

#line 248 "msgpack/_packer.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 248 "msgpack/_packer.pyx"
        }

#line 248 "msgpack/_packer.pyx"
        case  3:

#line 248 "msgpack/_packer.pyx"
        if (kw_args > 0) {

#line 248 "msgpack/_packer.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__encoding);

#line 248 "msgpack/_packer.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 248 "msgpack/_packer.pyx"
        }

#line 248 "msgpack/_packer.pyx"
        case  4:

#line 248 "msgpack/_packer.pyx"
        if (kw_args > 0) {

#line 248 "msgpack/_packer.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__unicode_errors);

#line 248 "msgpack/_packer.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 248 "msgpack/_packer.pyx"
        }

#line 248 "msgpack/_packer.pyx"
      }

#line 248 "msgpack/_packer.pyx"
      if (unlikely(kw_args > 0)) {

#line 248 "msgpack/_packer.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pack") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 248 "msgpack/_packer.pyx"
      }

#line 248 "msgpack/_packer.pyx"
    } else {

#line 248 "msgpack/_packer.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: 
#line 248 "msgpack/_packer.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 248 "msgpack/_packer.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 248 "msgpack/_packer.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 248 "msgpack/_packer.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 248 "msgpack/_packer.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 248 "msgpack/_packer.pyx"
        break;
        default: 
#line 248 "msgpack/_packer.pyx"
goto __pyx_L5_argtuple_error;

#line 248 "msgpack/_packer.pyx"
      }

#line 248 "msgpack/_packer.pyx"
    }

#line 248 "msgpack/_packer.pyx"
    __pyx_v_o = values[0];

#line 248 "msgpack/_packer.pyx"
    __pyx_v_stream = values[1];

#line 248 "msgpack/_packer.pyx"
    __pyx_v_default = values[2];

#line 248 "msgpack/_packer.pyx"
    __pyx_v_encoding = values[3];

#line 248 "msgpack/_packer.pyx"
    __pyx_v_unicode_errors = values[4];

#line 248 "msgpack/_packer.pyx"
  }

#line 248 "msgpack/_packer.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 248 "msgpack/_packer.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pack", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 248 "msgpack/_packer.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 248 "msgpack/_packer.pyx"
  __pyx_L3_error:;

#line 248 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.pack", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 248 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 248 "msgpack/_packer.pyx"
  return NULL;

#line 248 "msgpack/_packer.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 248 "msgpack/_packer.pyx"
__pyx_pf_7msgpack_7_packer_pack(__pyx_self, __pyx_v_o, __pyx_v_stream, __pyx_v_default, __pyx_v_encoding, __pyx_v_unicode_errors);

#line 248 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 248 "msgpack/_packer.pyx"
  return __pyx_r;

#line 248 "msgpack/_packer.pyx"
}

#line 248 "msgpack/_packer.pyx"


#line 248 "msgpack/_packer.pyx"
static PyObject *__pyx_pf_7msgpack_7_packer_pack(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_o, PyObject *__pyx_v_stream, PyObject *__pyx_v_default, PyObject *__pyx_v_encoding, PyObject *__pyx_v_unicode_errors) {
  struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_packer = NULL
#line 248 "msgpack/_packer.pyx"
;

#line 248 "msgpack/_packer.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 248 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("pack", 0);

  /* "msgpack/_packer.pyx":251
 *     """
 *     pack an object `o` and write it to stream)."""
 *     packer = Packer(default=default, encoding=encoding, unicode_errors=unicode_errors)             # <<<<<<<<<<<<<<
 *     stream.write(packer.pack(o))
 * 
 */

#line 251 "msgpack/_packer.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 251 "msgpack/_packer.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 251 "msgpack/_packer.pyx"
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__default), __pyx_v_default) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 251 "msgpack/_packer.pyx"
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__encoding), __pyx_v_encoding) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 251 "msgpack/_packer.pyx"
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__unicode_errors), __pyx_v_unicode_errors) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 251 "msgpack/_packer.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7msgpack_7_packer_Packer)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 251 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 251 "msgpack/_packer.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 251 "msgpack/_packer.pyx"
  __pyx_v_packer = ((struct __pyx_obj_7msgpack_7_packer_Packer *)__pyx_t_2);

#line 251 "msgpack/_packer.pyx"
  __pyx_t_2 = 0;

  /* "msgpack/_packer.pyx":252
 *     pack an object `o` and write it to stream)."""
 *     packer = Packer(default=default, encoding=encoding, unicode_errors=unicode_errors)
 *     stream.write(packer.pack(o))             # <<<<<<<<<<<<<<
 * 
 * def packb(object o, default=None, encoding='utf-8', unicode_errors='strict', use_single_float=False):
 */

#line 252 "msgpack/_packer.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_stream, __pyx_n_s__write); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 252 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 252 "msgpack/_packer.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_7msgpack_7_packer_Packer *)__pyx_v_packer->__pyx_vtab)->pack(__pyx_v_packer, __pyx_v_o, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 252 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 252 "msgpack/_packer.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 252 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 252 "msgpack/_packer.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 252 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 252 "msgpack/_packer.pyx"
  __pyx_t_1 = 0;

#line 252 "msgpack/_packer.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 252 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 252 "msgpack/_packer.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 252 "msgpack/_packer.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 252 "msgpack/_packer.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 252 "msgpack/_packer.pyx"


#line 252 "msgpack/_packer.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 252 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 252 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 252 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 252 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 252 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 252 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.pack", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 252 "msgpack/_packer.pyx"
  __pyx_r = NULL;

#line 252 "msgpack/_packer.pyx"
  __pyx_L0:;

#line 252 "msgpack/_packer.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_packer);

#line 252 "msgpack/_packer.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 252 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 252 "msgpack/_packer.pyx"
  return __pyx_r;

#line 252 "msgpack/_packer.pyx"
}

#line 252 "msgpack/_packer.pyx"


#line 252 "msgpack/_packer.pyx"
/* Python wrapper */

#line 252 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_3packb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 252 "msgpack/_packer.pyx"
static char __pyx_doc_7msgpack_7_packer_2packb[] = "packb(o, default=None, encoding='utf-8', unicode_errors='strict', use_single_float=False)\n\n    pack o and return packed bytes.";
static PyMethodDef __pyx_mdef_7msgpack_7_packer_3packb = 
#line 252 "msgpack/_packer.pyx"
{__Pyx_NAMESTR("packb"), (PyCFunction)__pyx_pw_7msgpack_7_packer_3packb, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7msgpack_7_packer_2packb)};

#line 252 "msgpack/_packer.pyx"
static PyObject *__pyx_pw_7msgpack_7_packer_3packb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_o = 0
#line 252 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_default = 0
#line 252 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_encoding = 0
#line 252 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_unicode_errors = 0
#line 252 "msgpack/_packer.pyx"
;
  PyObject *__pyx_v_use_single_float = 0
#line 252 "msgpack/_packer.pyx"
;

#line 252 "msgpack/_packer.pyx"
  PyObject *__pyx_r = 0;

#line 252 "msgpack/_packer.pyx"
  __Pyx_RefNannyDeclarations

#line 252 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("packb (wrapper)", 0);

#line 252 "msgpack/_packer.pyx"
  {

#line 252 "msgpack/_packer.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__o,&__pyx_n_s__default,&__pyx_n_s__encoding,&__pyx_n_s__unicode_errors,&__pyx_n_s__use_single_float,0};

#line 252 "msgpack/_packer.pyx"
    PyObject* values[5] = {0,0,0,0,0};

    /* "msgpack/_packer.pyx":254
 *     stream.write(packer.pack(o))
 * 
 * def packb(object o, default=None, encoding='utf-8', unicode_errors='strict', use_single_float=False):             # <<<<<<<<<<<<<<
 *     """
 *     pack o and return packed bytes."""
 */

#line 254 "msgpack/_packer.pyx"
    values[1] = ((PyObject *)Py_None);

#line 254 "msgpack/_packer.pyx"
    values[2] = ((PyObject *)__pyx_kp_s_3);

#line 254 "msgpack/_packer.pyx"
    values[3] = ((PyObject *)__pyx_n_s__strict);

#line 254 "msgpack/_packer.pyx"
    values[4] = __pyx_k_15;

#line 254 "msgpack/_packer.pyx"
    if (unlikely(__pyx_kwds)) {

#line 254 "msgpack/_packer.pyx"
      Py_ssize_t kw_args;

#line 254 "msgpack/_packer.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 254 "msgpack/_packer.pyx"
      switch (pos_args) {
        case  5: 
#line 254 "msgpack/_packer.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 254 "msgpack/_packer.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 254 "msgpack/_packer.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 254 "msgpack/_packer.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 254 "msgpack/_packer.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 254 "msgpack/_packer.pyx"
        case  0: break;
        default: 
#line 254 "msgpack/_packer.pyx"
goto __pyx_L5_argtuple_error;

#line 254 "msgpack/_packer.pyx"
      }

#line 254 "msgpack/_packer.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 254 "msgpack/_packer.pyx"
      switch (pos_args) {

#line 254 "msgpack/_packer.pyx"
        case  0:

#line 254 "msgpack/_packer.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__o)) != 0)) kw_args--;
        else 
#line 254 "msgpack/_packer.pyx"
goto __pyx_L5_argtuple_error;

#line 254 "msgpack/_packer.pyx"
        case  1:

#line 254 "msgpack/_packer.pyx"
        if (kw_args > 0) {

#line 254 "msgpack/_packer.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__default);

#line 254 "msgpack/_packer.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 254 "msgpack/_packer.pyx"
        }

#line 254 "msgpack/_packer.pyx"
        case  2:

#line 254 "msgpack/_packer.pyx"
        if (kw_args > 0) {

#line 254 "msgpack/_packer.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__encoding);

#line 254 "msgpack/_packer.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 254 "msgpack/_packer.pyx"
        }

#line 254 "msgpack/_packer.pyx"
        case  3:

#line 254 "msgpack/_packer.pyx"
        if (kw_args > 0) {

#line 254 "msgpack/_packer.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__unicode_errors);

#line 254 "msgpack/_packer.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 254 "msgpack/_packer.pyx"
        }

#line 254 "msgpack/_packer.pyx"
        case  4:

#line 254 "msgpack/_packer.pyx"
        if (kw_args > 0) {

#line 254 "msgpack/_packer.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__use_single_float);

#line 254 "msgpack/_packer.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 254 "msgpack/_packer.pyx"
        }

#line 254 "msgpack/_packer.pyx"
      }

#line 254 "msgpack/_packer.pyx"
      if (unlikely(kw_args > 0)) {

#line 254 "msgpack/_packer.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "packb") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 254 "msgpack/_packer.pyx"
      }

#line 254 "msgpack/_packer.pyx"
    } else {

#line 254 "msgpack/_packer.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: 
#line 254 "msgpack/_packer.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 254 "msgpack/_packer.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 254 "msgpack/_packer.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 254 "msgpack/_packer.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 254 "msgpack/_packer.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 254 "msgpack/_packer.pyx"
        break;
        default: 
#line 254 "msgpack/_packer.pyx"
goto __pyx_L5_argtuple_error;

#line 254 "msgpack/_packer.pyx"
      }

#line 254 "msgpack/_packer.pyx"
    }

#line 254 "msgpack/_packer.pyx"
    __pyx_v_o = values[0];

#line 254 "msgpack/_packer.pyx"
    __pyx_v_default = values[1];

#line 254 "msgpack/_packer.pyx"
    __pyx_v_encoding = values[2];

#line 254 "msgpack/_packer.pyx"
    __pyx_v_unicode_errors = values[3];

#line 254 "msgpack/_packer.pyx"
    __pyx_v_use_single_float = values[4];

#line 254 "msgpack/_packer.pyx"
  }

#line 254 "msgpack/_packer.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 254 "msgpack/_packer.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("packb", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 254 "msgpack/_packer.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 254 "msgpack/_packer.pyx"
  __pyx_L3_error:;

#line 254 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.packb", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 254 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 254 "msgpack/_packer.pyx"
  return NULL;

#line 254 "msgpack/_packer.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 254 "msgpack/_packer.pyx"
__pyx_pf_7msgpack_7_packer_2packb(__pyx_self, __pyx_v_o, __pyx_v_default, __pyx_v_encoding, __pyx_v_unicode_errors, __pyx_v_use_single_float);

#line 254 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 254 "msgpack/_packer.pyx"
  return __pyx_r;

#line 254 "msgpack/_packer.pyx"
}

#line 254 "msgpack/_packer.pyx"


#line 254 "msgpack/_packer.pyx"
static PyObject *__pyx_pf_7msgpack_7_packer_2packb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_o, PyObject *__pyx_v_default, PyObject *__pyx_v_encoding, PyObject *__pyx_v_unicode_errors, PyObject *__pyx_v_use_single_float) {
  struct __pyx_obj_7msgpack_7_packer_Packer *__pyx_v_packer = NULL
#line 254 "msgpack/_packer.pyx"
;

#line 254 "msgpack/_packer.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 254 "msgpack/_packer.pyx"
  __Pyx_RefNannySetupContext("packb", 0);

  /* "msgpack/_packer.pyx":257
 *     """
 *     pack o and return packed bytes."""
 *     packer = Packer(default=default, encoding=encoding, unicode_errors=unicode_errors,             # <<<<<<<<<<<<<<
 *                     use_single_float=use_single_float)
 *     return packer.pack(o)
 */

#line 257 "msgpack/_packer.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "msgpack/_packer.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 257 "msgpack/_packer.pyx"
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__default), __pyx_v_default) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "msgpack/_packer.pyx"
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__encoding), __pyx_v_encoding) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "msgpack/_packer.pyx"
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__unicode_errors), __pyx_v_unicode_errors) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "msgpack/_packer.pyx":258
 *     pack o and return packed bytes."""
 *     packer = Packer(default=default, encoding=encoding, unicode_errors=unicode_errors,
 *                     use_single_float=use_single_float)             # <<<<<<<<<<<<<<
 *     return packer.pack(o)
 */

#line 258 "msgpack/_packer.pyx"
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__use_single_float), __pyx_v_use_single_float) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 258 "msgpack/_packer.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7msgpack_7_packer_Packer)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 258 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 258 "msgpack/_packer.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 258 "msgpack/_packer.pyx"
  __pyx_v_packer = ((struct __pyx_obj_7msgpack_7_packer_Packer *)__pyx_t_2);

#line 258 "msgpack/_packer.pyx"
  __pyx_t_2 = 0;

  /* "msgpack/_packer.pyx":259
 *     packer = Packer(default=default, encoding=encoding, unicode_errors=unicode_errors,
 *                     use_single_float=use_single_float)
 *     return packer.pack(o)             # <<<<<<<<<<<<<<
 */

#line 259 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 259 "msgpack/_packer.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_7msgpack_7_packer_Packer *)__pyx_v_packer->__pyx_vtab)->pack(__pyx_v_packer, __pyx_v_o, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 259 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 259 "msgpack/_packer.pyx"
  __pyx_r = __pyx_t_2;

#line 259 "msgpack/_packer.pyx"
  __pyx_t_2 = 0;

#line 259 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 259 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 259 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 259 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 259 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 259 "msgpack/_packer.pyx"
  __Pyx_AddTraceback("msgpack._packer.packb", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 259 "msgpack/_packer.pyx"
  __pyx_r = NULL;

#line 259 "msgpack/_packer.pyx"
  __pyx_L0:;

#line 259 "msgpack/_packer.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_packer);

#line 259 "msgpack/_packer.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 259 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 259 "msgpack/_packer.pyx"
  return __pyx_r;

#line 259 "msgpack/_packer.pyx"
}

#line 259 "msgpack/_packer.pyx"
static struct __pyx_vtabstruct_7msgpack_7_packer_Packer __pyx_vtable_7msgpack_7_packer_Packer;

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
static PyObject *__pyx_tp_new_7msgpack_7_packer_Packer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 259 "msgpack/_packer.pyx"
  struct __pyx_obj_7msgpack_7_packer_Packer *p;

#line 259 "msgpack/_packer.pyx"
  PyObject *o = (*t->tp_alloc)(t, 0);

#line 259 "msgpack/_packer.pyx"
  if (!o) return 0;

#line 259 "msgpack/_packer.pyx"
  p = ((struct __pyx_obj_7msgpack_7_packer_Packer *)o);

#line 259 "msgpack/_packer.pyx"
  p->__pyx_vtab = __pyx_vtabptr_7msgpack_7_packer_Packer;

#line 259 "msgpack/_packer.pyx"
  p->_default = Py_None; Py_INCREF(Py_None);

#line 259 "msgpack/_packer.pyx"
  p->_bencoding = Py_None; Py_INCREF(Py_None);

#line 259 "msgpack/_packer.pyx"
  p->_berrors = Py_None; Py_INCREF(Py_None);

#line 259 "msgpack/_packer.pyx"
  p->use_float = ((PyBoolObject *)Py_None); Py_INCREF(Py_None);

#line 259 "msgpack/_packer.pyx"
  if (__pyx_pw_7msgpack_7_packer_6Packer_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {

#line 259 "msgpack/_packer.pyx"
    Py_DECREF(o); o = 0;

#line 259 "msgpack/_packer.pyx"
  }

#line 259 "msgpack/_packer.pyx"
  return o;

#line 259 "msgpack/_packer.pyx"
}

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
static void __pyx_tp_dealloc_7msgpack_7_packer_Packer(PyObject *o) {

#line 259 "msgpack/_packer.pyx"
  struct __pyx_obj_7msgpack_7_packer_Packer *p = (struct __pyx_obj_7msgpack_7_packer_Packer *)o;

#line 259 "msgpack/_packer.pyx"
  PyObject_GC_UnTrack(o);

#line 259 "msgpack/_packer.pyx"
  {

#line 259 "msgpack/_packer.pyx"
    PyObject *etype, *eval, *etb;

#line 259 "msgpack/_packer.pyx"
    PyErr_Fetch(&etype, &eval, &etb);

#line 259 "msgpack/_packer.pyx"
    ++Py_REFCNT(o);

#line 259 "msgpack/_packer.pyx"
    __pyx_pw_7msgpack_7_packer_6Packer_5__dealloc__(o);

#line 259 "msgpack/_packer.pyx"
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);

#line 259 "msgpack/_packer.pyx"
    --Py_REFCNT(o);

#line 259 "msgpack/_packer.pyx"
    PyErr_Restore(etype, eval, etb);

#line 259 "msgpack/_packer.pyx"
  }

#line 259 "msgpack/_packer.pyx"
  Py_CLEAR(p->_default);

#line 259 "msgpack/_packer.pyx"
  Py_CLEAR(p->_bencoding);

#line 259 "msgpack/_packer.pyx"
  Py_CLEAR(p->_berrors);

#line 259 "msgpack/_packer.pyx"
  Py_CLEAR(p->use_float);

#line 259 "msgpack/_packer.pyx"
  PyObject_GC_Track(o);

#line 259 "msgpack/_packer.pyx"
  (*Py_TYPE(o)->tp_free)(o);

#line 259 "msgpack/_packer.pyx"
}

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
static int __pyx_tp_traverse_7msgpack_7_packer_Packer(PyObject *o, visitproc v, void *a) {

#line 259 "msgpack/_packer.pyx"
  int e;

#line 259 "msgpack/_packer.pyx"
  struct __pyx_obj_7msgpack_7_packer_Packer *p = (struct __pyx_obj_7msgpack_7_packer_Packer *)o;

#line 259 "msgpack/_packer.pyx"
  if (p->_default) {

#line 259 "msgpack/_packer.pyx"
    e = (*v)(p->_default, a); if (e) return e;

#line 259 "msgpack/_packer.pyx"
  }

#line 259 "msgpack/_packer.pyx"
  if (p->_bencoding) {

#line 259 "msgpack/_packer.pyx"
    e = (*v)(p->_bencoding, a); if (e) return e;

#line 259 "msgpack/_packer.pyx"
  }

#line 259 "msgpack/_packer.pyx"
  if (p->_berrors) {

#line 259 "msgpack/_packer.pyx"
    e = (*v)(p->_berrors, a); if (e) return e;

#line 259 "msgpack/_packer.pyx"
  }

#line 259 "msgpack/_packer.pyx"
  if (p->use_float) {

#line 259 "msgpack/_packer.pyx"
    e = (*v)(((PyObject*)p->use_float), a); if (e) return e;

#line 259 "msgpack/_packer.pyx"
  }

#line 259 "msgpack/_packer.pyx"
  return 0;

#line 259 "msgpack/_packer.pyx"
}

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
static int __pyx_tp_clear_7msgpack_7_packer_Packer(PyObject *o) {

#line 259 "msgpack/_packer.pyx"
  struct __pyx_obj_7msgpack_7_packer_Packer *p = (struct __pyx_obj_7msgpack_7_packer_Packer *)o;

#line 259 "msgpack/_packer.pyx"
  PyObject* tmp;

#line 259 "msgpack/_packer.pyx"
  tmp = ((PyObject*)p->_default);

#line 259 "msgpack/_packer.pyx"
  p->_default = Py_None; Py_INCREF(Py_None);

#line 259 "msgpack/_packer.pyx"
  Py_XDECREF(tmp);

#line 259 "msgpack/_packer.pyx"
  tmp = ((PyObject*)p->_bencoding);

#line 259 "msgpack/_packer.pyx"
  p->_bencoding = Py_None; Py_INCREF(Py_None);

#line 259 "msgpack/_packer.pyx"
  Py_XDECREF(tmp);

#line 259 "msgpack/_packer.pyx"
  tmp = ((PyObject*)p->_berrors);

#line 259 "msgpack/_packer.pyx"
  p->_berrors = Py_None; Py_INCREF(Py_None);

#line 259 "msgpack/_packer.pyx"
  Py_XDECREF(tmp);

#line 259 "msgpack/_packer.pyx"
  tmp = ((PyObject*)p->use_float);

#line 259 "msgpack/_packer.pyx"
  p->use_float = ((PyBoolObject *)Py_None); Py_INCREF(Py_None);

#line 259 "msgpack/_packer.pyx"
  Py_XDECREF(tmp);

#line 259 "msgpack/_packer.pyx"
  return 0;

#line 259 "msgpack/_packer.pyx"
}

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
static PyMethodDef __pyx_methods_7msgpack_7_packer_Packer[] = {

#line 259 "msgpack/_packer.pyx"
  {__Pyx_NAMESTR("pack"), (PyCFunction)__pyx_pw_7msgpack_7_packer_6Packer_7pack, METH_O, __Pyx_DOCSTR(__pyx_doc_7msgpack_7_packer_6Packer_6pack)},

#line 259 "msgpack/_packer.pyx"
  {__Pyx_NAMESTR("pack_array_header"), (PyCFunction)__pyx_pw_7msgpack_7_packer_6Packer_9pack_array_header, METH_O, __Pyx_DOCSTR(__pyx_doc_7msgpack_7_packer_6Packer_8pack_array_header)},

#line 259 "msgpack/_packer.pyx"
  {__Pyx_NAMESTR("pack_map_header"), (PyCFunction)__pyx_pw_7msgpack_7_packer_6Packer_11pack_map_header, METH_O, __Pyx_DOCSTR(__pyx_doc_7msgpack_7_packer_6Packer_10pack_map_header)},

#line 259 "msgpack/_packer.pyx"
  {__Pyx_NAMESTR("pack_map_pairs"), (PyCFunction)__pyx_pw_7msgpack_7_packer_6Packer_13pack_map_pairs, METH_O, __Pyx_DOCSTR(__pyx_doc_7msgpack_7_packer_6Packer_12pack_map_pairs)},

#line 259 "msgpack/_packer.pyx"
  {__Pyx_NAMESTR("reset"), (PyCFunction)__pyx_pw_7msgpack_7_packer_6Packer_15reset, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7msgpack_7_packer_6Packer_14reset)},

#line 259 "msgpack/_packer.pyx"
  {__Pyx_NAMESTR("bytes"), (PyCFunction)__pyx_pw_7msgpack_7_packer_6Packer_17bytes, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7msgpack_7_packer_6Packer_16bytes)},

#line 259 "msgpack/_packer.pyx"
  {0, 0, 0, 0}

#line 259 "msgpack/_packer.pyx"
};

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
static PyNumberMethods __pyx_tp_as_number_Packer = {

#line 259 "msgpack/_packer.pyx"
  0, /*nb_add*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_subtract*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_multiply*/

#line 259 "msgpack/_packer.pyx"
  #if PY_MAJOR_VERSION < 3

#line 259 "msgpack/_packer.pyx"
  0, /*nb_divide*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
  0, /*nb_remainder*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_divmod*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_power*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_negative*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_positive*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_absolute*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_nonzero*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_invert*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_lshift*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_rshift*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_and*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_xor*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_or*/

#line 259 "msgpack/_packer.pyx"
  #if PY_MAJOR_VERSION < 3

#line 259 "msgpack/_packer.pyx"
  0, /*nb_coerce*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
  0, /*nb_int*/

#line 259 "msgpack/_packer.pyx"
  #if PY_MAJOR_VERSION < 3

#line 259 "msgpack/_packer.pyx"
  0, /*nb_long*/

#line 259 "msgpack/_packer.pyx"
  #else

#line 259 "msgpack/_packer.pyx"
  0, /*reserved*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
  0, /*nb_float*/

#line 259 "msgpack/_packer.pyx"
  #if PY_MAJOR_VERSION < 3

#line 259 "msgpack/_packer.pyx"
  0, /*nb_oct*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
  #if PY_MAJOR_VERSION < 3

#line 259 "msgpack/_packer.pyx"
  0, /*nb_hex*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_add*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_subtract*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_multiply*/

#line 259 "msgpack/_packer.pyx"
  #if PY_MAJOR_VERSION < 3

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_divide*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_remainder*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_power*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_lshift*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_rshift*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_and*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_xor*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_or*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_floor_divide*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_true_divide*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_floor_divide*/

#line 259 "msgpack/_packer.pyx"
  0, /*nb_inplace_true_divide*/

#line 259 "msgpack/_packer.pyx"
  #if PY_VERSION_HEX >= 0x02050000

#line 259 "msgpack/_packer.pyx"
  0, /*nb_index*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
};

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
static PySequenceMethods __pyx_tp_as_sequence_Packer = {

#line 259 "msgpack/_packer.pyx"
  0, /*sq_length*/

#line 259 "msgpack/_packer.pyx"
  0, /*sq_concat*/

#line 259 "msgpack/_packer.pyx"
  0, /*sq_repeat*/

#line 259 "msgpack/_packer.pyx"
  0, /*sq_item*/

#line 259 "msgpack/_packer.pyx"
  0, /*sq_slice*/

#line 259 "msgpack/_packer.pyx"
  0, /*sq_ass_item*/

#line 259 "msgpack/_packer.pyx"
  0, /*sq_ass_slice*/

#line 259 "msgpack/_packer.pyx"
  0, /*sq_contains*/

#line 259 "msgpack/_packer.pyx"
  0, /*sq_inplace_concat*/

#line 259 "msgpack/_packer.pyx"
  0, /*sq_inplace_repeat*/

#line 259 "msgpack/_packer.pyx"
};

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
static PyMappingMethods __pyx_tp_as_mapping_Packer = {

#line 259 "msgpack/_packer.pyx"
  0, /*mp_length*/

#line 259 "msgpack/_packer.pyx"
  0, /*mp_subscript*/

#line 259 "msgpack/_packer.pyx"
  0, /*mp_ass_subscript*/

#line 259 "msgpack/_packer.pyx"
};

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
static PyBufferProcs __pyx_tp_as_buffer_Packer = {

#line 259 "msgpack/_packer.pyx"
  #if PY_MAJOR_VERSION < 3

#line 259 "msgpack/_packer.pyx"
  0, /*bf_getreadbuffer*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
  #if PY_MAJOR_VERSION < 3

#line 259 "msgpack/_packer.pyx"
  0, /*bf_getwritebuffer*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
  #if PY_MAJOR_VERSION < 3

#line 259 "msgpack/_packer.pyx"
  0, /*bf_getsegcount*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
  #if PY_MAJOR_VERSION < 3

#line 259 "msgpack/_packer.pyx"
  0, /*bf_getcharbuffer*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
  #if PY_VERSION_HEX >= 0x02060000

#line 259 "msgpack/_packer.pyx"
  0, /*bf_getbuffer*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
  #if PY_VERSION_HEX >= 0x02060000

#line 259 "msgpack/_packer.pyx"
  0, /*bf_releasebuffer*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
};

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
static PyTypeObject __pyx_type_7msgpack_7_packer_Packer = {

#line 259 "msgpack/_packer.pyx"
  PyVarObject_HEAD_INIT(0, 0)

#line 259 "msgpack/_packer.pyx"
  __Pyx_NAMESTR("msgpack._packer.Packer"), /*tp_name*/

#line 259 "msgpack/_packer.pyx"
  sizeof(struct __pyx_obj_7msgpack_7_packer_Packer), /*tp_basicsize*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_itemsize*/

#line 259 "msgpack/_packer.pyx"
  __pyx_tp_dealloc_7msgpack_7_packer_Packer, /*tp_dealloc*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_print*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_getattr*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_setattr*/

#line 259 "msgpack/_packer.pyx"
  #if PY_MAJOR_VERSION < 3

#line 259 "msgpack/_packer.pyx"
  0, /*tp_compare*/

#line 259 "msgpack/_packer.pyx"
  #else

#line 259 "msgpack/_packer.pyx"
  0, /*reserved*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
  0, /*tp_repr*/

#line 259 "msgpack/_packer.pyx"
  &__pyx_tp_as_number_Packer, /*tp_as_number*/

#line 259 "msgpack/_packer.pyx"
  &__pyx_tp_as_sequence_Packer, /*tp_as_sequence*/

#line 259 "msgpack/_packer.pyx"
  &__pyx_tp_as_mapping_Packer, /*tp_as_mapping*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_hash*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_call*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_str*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_getattro*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_setattro*/

#line 259 "msgpack/_packer.pyx"
  &__pyx_tp_as_buffer_Packer, /*tp_as_buffer*/

#line 259 "msgpack/_packer.pyx"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 259 "msgpack/_packer.pyx"
  __Pyx_DOCSTR("Packer(default=None, encoding='utf-8', unicode_errors='strict', use_single_float=False, int autoreset=1)\nMessagePack Packer\n\n    usage:\n\n        packer = Packer()\n        astream.write(packer.pack(a))\n        astream.write(packer.pack(b))\n\n    Packer's constructor has some keyword arguments:\n\n    * *defaut* - Convert user type to builtin type that Packer supports.\n      See also simplejson's document.\n    * *encoding* - Convert unicode to bytes with this encoding. (default: 'utf-8')\n    * *unicode_erros* - Error handler for encoding unicode. (default: 'strict')\n    * *use_single_float* - Use single precision float type for float. (default: False)\n    * *autoreset* - Reset buffer after each pack and return it's content as `bytes`. (default: True).\n      If set this to false, use `bytes()` to get content and `.reset()` to clear buffer.\n    "), /*tp_doc*/

#line 259 "msgpack/_packer.pyx"
  __pyx_tp_traverse_7msgpack_7_packer_Packer, /*tp_traverse*/

#line 259 "msgpack/_packer.pyx"
  __pyx_tp_clear_7msgpack_7_packer_Packer, /*tp_clear*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_richcompare*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_weaklistoffset*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_iter*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_iternext*/

#line 259 "msgpack/_packer.pyx"
  __pyx_methods_7msgpack_7_packer_Packer, /*tp_methods*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_members*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_getset*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_base*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_dict*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_descr_get*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_descr_set*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_dictoffset*/

#line 259 "msgpack/_packer.pyx"
  __pyx_pw_7msgpack_7_packer_6Packer_3__init__, /*tp_init*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_alloc*/

#line 259 "msgpack/_packer.pyx"
  __pyx_tp_new_7msgpack_7_packer_Packer, /*tp_new*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_free*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_is_gc*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_bases*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_mro*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_cache*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_subclasses*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_weaklist*/

#line 259 "msgpack/_packer.pyx"
  0, /*tp_del*/

#line 259 "msgpack/_packer.pyx"
  #if PY_VERSION_HEX >= 0x02060000

#line 259 "msgpack/_packer.pyx"
  0, /*tp_version_tag*/

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
};

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
static PyMethodDef __pyx_methods[] = {

#line 259 "msgpack/_packer.pyx"
  {0, 0, 0, 0}

#line 259 "msgpack/_packer.pyx"
};

#line 259 "msgpack/_packer.pyx"


#line 259 "msgpack/_packer.pyx"
#if PY_MAJOR_VERSION >= 3

#line 259 "msgpack/_packer.pyx"
static struct PyModuleDef __pyx_moduledef = {

#line 259 "msgpack/_packer.pyx"
  #if PY_VERSION_HEX < 0x03020000

#line 259 "msgpack/_packer.pyx"
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },

#line 259 "msgpack/_packer.pyx"
  #else

#line 259 "msgpack/_packer.pyx"
    PyModuleDef_HEAD_INIT,

#line 259 "msgpack/_packer.pyx"
  #endif

#line 259 "msgpack/_packer.pyx"
    __Pyx_NAMESTR("_packer"),

#line 259 "msgpack/_packer.pyx"
    0, /* m_doc */

#line 259 "msgpack/_packer.pyx"
    -1, /* m_size */

#line 259 "msgpack/_packer.pyx"
    __pyx_methods /* m_methods */,

#line 259 "msgpack/_packer.pyx"
    NULL, /* m_reload */

#line 259 "msgpack/_packer.pyx"
    NULL, /* m_traverse */

#line 259 "msgpack/_packer.pyx"
    NULL, /* m_clear */

#line 259 "msgpack/_packer.pyx"
    NULL /* m_free */

#line 259 "msgpack/_packer.pyx"
};

#line 259 "msgpack/_packer.pyx"
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_kp_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 0},
  {&__pyx_kp_s_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 0, 1, 0},
  {&__pyx_n_s_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 0, 1, 1},
  {&__pyx_kp_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 0},
  {&__pyx_n_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 1},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_n_s__MemoryError, __pyx_k__MemoryError, sizeof(__pyx_k__MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s__PackValueError, __pyx_k__PackValueError, sizeof(__pyx_k__PackValueError), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__ascii, __pyx_k__ascii, sizeof(__pyx_k__ascii), 0, 0, 1, 1},
  {&__pyx_n_s__autoreset, __pyx_k__autoreset, sizeof(__pyx_k__autoreset), 0, 0, 1, 1},
  {&__pyx_n_s__default, __pyx_k__default, sizeof(__pyx_k__default), 0, 0, 1, 1},
  {&__pyx_n_s__encode, __pyx_k__encode, sizeof(__pyx_k__encode), 0, 0, 1, 1},
  {&__pyx_n_s__encoding, __pyx_k__encoding, sizeof(__pyx_k__encoding), 0, 0, 1, 1},
  {&__pyx_n_s__items, __pyx_k__items, sizeof(__pyx_k__items), 0, 0, 1, 1},
  {&__pyx_n_s__iteritems, __pyx_k__iteritems, sizeof(__pyx_k__iteritems), 0, 0, 1, 1},
  {&__pyx_n_s__o, __pyx_k__o, sizeof(__pyx_k__o), 0, 0, 1, 1},
  {&__pyx_n_s__pack, __pyx_k__pack, sizeof(__pyx_k__pack), 0, 0, 1, 1},
  {&__pyx_n_s__packb, __pyx_k__packb, sizeof(__pyx_k__packb), 0, 0, 1, 1},
  {&__pyx_n_s__packer, __pyx_k__packer, sizeof(__pyx_k__packer), 0, 0, 1, 1},
  {&__pyx_n_s__stream, __pyx_k__stream, sizeof(__pyx_k__stream), 0, 0, 1, 1},
  {&__pyx_n_s__strict, __pyx_k__strict, sizeof(__pyx_k__strict), 0, 0, 1, 1},
  {&__pyx_n_s__unicode_errors, __pyx_k__unicode_errors, sizeof(__pyx_k__unicode_errors), 0, 0, 1, 1},
  {&__pyx_n_s__use_single_float, __pyx_k__use_single_float, sizeof(__pyx_k__use_single_float), 0, 0, 1, 1},
  {&__pyx_n_s__write, __pyx_k__write, sizeof(__pyx_k__write), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_MemoryError = __Pyx_GetName(__pyx_b, __pyx_n_s__MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "msgpack/_packer.pyx":73
 *         self.pk.buf = <char*> malloc(buf_size);
 *         if self.pk.buf == NULL:
 *             raise MemoryError("Unable to allocate internal buffer.")             # <<<<<<<<<<<<<<
 *         self.pk.buf_size = buf_size
 *         self.pk.length = 0
 */

#line 73 "msgpack/_packer.pyx"
  __pyx_k_tuple_2 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_1)); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 73 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_2);

#line 73 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "msgpack/_packer.pyx":82
 *         if default is not None:
 *             if not PyCallable_Check(default):
 *                 raise TypeError("default must be a callable.")             # <<<<<<<<<<<<<<
 *         self._default = default
 *         if encoding is None:
 */

#line 82 "msgpack/_packer.pyx"
  __pyx_k_tuple_6 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_5)); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_6);

#line 82 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));

  /* "msgpack/_packer.pyx":89
 *         else:
 *             if isinstance(encoding, unicode):
 *                 self._bencoding = encoding.encode('ascii')             # <<<<<<<<<<<<<<
 *             else:
 *                 self._bencoding = encoding
 */

#line 89 "msgpack/_packer.pyx"
  __pyx_k_tuple_7 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__ascii)); if (unlikely(!__pyx_k_tuple_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 89 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_7);

#line 89 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_7));

  /* "msgpack/_packer.pyx":94
 *             self.encoding = PyBytes_AsString(self._bencoding)
 *             if isinstance(unicode_errors, unicode):
 *                 self._berrors = unicode_errors.encode('ascii')             # <<<<<<<<<<<<<<
 *             else:
 *                 self._berrors = unicode_errors
 */

#line 94 "msgpack/_packer.pyx"
  __pyx_k_tuple_8 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__ascii)); if (unlikely(!__pyx_k_tuple_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 94 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_8);

#line 94 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_8));

  /* "msgpack/_packer.pyx":113
 * 
 *         if nest_limit < 0:
 *             raise PackValueError("recursion limit exceeded.")             # <<<<<<<<<<<<<<
 * 
 *         if o is None:
 */

#line 113 "msgpack/_packer.pyx"
  __pyx_k_tuple_11 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_10)); if (unlikely(!__pyx_k_tuple_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 113 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_11);

#line 113 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_11));

  /* "msgpack/_packer.pyx":146
 *         elif PyUnicode_Check(o):
 *             if not self.encoding:
 *                 raise TypeError("Can't encode unicode string: no encoding is specified")             # <<<<<<<<<<<<<<
 *             o = PyUnicode_AsEncodedString(o, self.encoding, self.unicode_errors)
 *             rawval = o
 */

#line 146 "msgpack/_packer.pyx"
  __pyx_k_tuple_13 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_12)); if (unlikely(!__pyx_k_tuple_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 146 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_13);

#line 146 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_13));

  /* "msgpack/_packer.pyx":248
 * 
 * 
 * def pack(object o, object stream, default=None, encoding='utf-8', unicode_errors='strict'):             # <<<<<<<<<<<<<<
 *     """
 *     pack an object `o` and write it to stream)."""
 */

#line 248 "msgpack/_packer.pyx"
  __pyx_k_tuple_17 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__o), ((PyObject *)__pyx_n_s__stream), ((PyObject *)__pyx_n_s__default), ((PyObject *)__pyx_n_s__encoding), ((PyObject *)__pyx_n_s__unicode_errors), ((PyObject *)__pyx_n_s__packer)); if (unlikely(!__pyx_k_tuple_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 248 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_17);

#line 248 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_17));

#line 248 "msgpack/_packer.pyx"
  __pyx_k_codeobj_18 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__pack, 248, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "msgpack/_packer.pyx":254
 *     stream.write(packer.pack(o))
 * 
 * def packb(object o, default=None, encoding='utf-8', unicode_errors='strict', use_single_float=False):             # <<<<<<<<<<<<<<
 *     """
 *     pack o and return packed bytes."""
 */

#line 254 "msgpack/_packer.pyx"
  __pyx_k_tuple_21 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__o), ((PyObject *)__pyx_n_s__default), ((PyObject *)__pyx_n_s__encoding), ((PyObject *)__pyx_n_s__unicode_errors), ((PyObject *)__pyx_n_s__use_single_float), ((PyObject *)__pyx_n_s__packer)); if (unlikely(!__pyx_k_tuple_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 254 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_21);

#line 254 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_21));

#line 254 "msgpack/_packer.pyx"
  __pyx_k_codeobj_22 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__packb, 254, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 254 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 254 "msgpack/_packer.pyx"
  return 0;

#line 254 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 254 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 254 "msgpack/_packer.pyx"
  return -1;

#line 254 "msgpack/_packer.pyx"
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_packer(void); /*proto*/
PyMODINIT_FUNC init_packer(void)
#else
PyMODINIT_FUNC PyInit__packer(void); /*proto*/
PyMODINIT_FUNC PyInit__packer(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__packer(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_packer"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "msgpack._packer")) {
      if (unlikely(PyDict_SetItemString(modules, "msgpack._packer", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_msgpack___packer) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_7msgpack_7_packer_Packer = &__pyx_vtable_7msgpack_7_packer_Packer;
  __pyx_vtable_7msgpack_7_packer_Packer._pack = (int (*)(struct __pyx_obj_7msgpack_7_packer_Packer *, PyObject *, struct __pyx_opt_args_7msgpack_7_packer_6Packer__pack *__pyx_optional_args))__pyx_f_7msgpack_7_packer_6Packer__pack;
  __pyx_vtable_7msgpack_7_packer_Packer.pack = (PyObject *(*)(struct __pyx_obj_7msgpack_7_packer_Packer *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7msgpack_7_packer_6Packer_pack;
  if (PyType_Ready(&__pyx_type_7msgpack_7_packer_Packer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_7msgpack_7_packer_Packer.tp_dict, __pyx_vtabptr_7msgpack_7_packer_Packer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Packer", (PyObject *)&__pyx_type_7msgpack_7_packer_Packer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7msgpack_7_packer_Packer = &__pyx_type_7msgpack_7_packer_Packer;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "msgpack/_packer.pyx":15
 * from libc.limits cimport *
 * 
 * from msgpack.exceptions import PackValueError             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "pack.h":
 */

#line 15 "msgpack/_packer.pyx"
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 15 "msgpack/_packer.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_n_s__PackValueError));

#line 15 "msgpack/_packer.pyx"
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__PackValueError));

#line 15 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__PackValueError));

#line 15 "msgpack/_packer.pyx"
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_16), ((PyObject *)__pyx_t_1), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 15 "msgpack/_packer.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 15 "msgpack/_packer.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__PackValueError);

#line 15 "msgpack/_packer.pyx"
  if (__pyx_t_1 == NULL) {

#line 15 "msgpack/_packer.pyx"
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseImportError(__pyx_n_s__PackValueError);

#line 15 "msgpack/_packer.pyx"
    if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "msgpack/_packer.pyx"
  }

#line 15 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 15 "msgpack/_packer.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PackValueError, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "msgpack/_packer.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 15 "msgpack/_packer.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msgpack/_packer.pyx":37
 *     int msgpack_pack_raw_body(msgpack_packer* pk, char* body, size_t l)
 * 
 * cdef int DEFAULT_RECURSE_LIMIT=511             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 37 "msgpack/_packer.pyx"
  __pyx_v_7msgpack_7_packer_DEFAULT_RECURSE_LIMIT = 511;

  /* "msgpack/_packer.pyx":77
 *         self.pk.length = 0
 * 
 *     def __init__(self, default=None, encoding='utf-8', unicode_errors='strict', use_single_float=False, bint autoreset=1):             # <<<<<<<<<<<<<<
 *         self.use_float = use_single_float
 *         self.autoreset = autoreset
 */

#line 77 "msgpack/_packer.pyx"
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 77 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 77 "msgpack/_packer.pyx"
  __pyx_k_4 = __pyx_t_2;

#line 77 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 77 "msgpack/_packer.pyx"
  __pyx_t_2 = 0;

  /* "msgpack/_packer.pyx":102
 *         free(self.pk.buf);
 * 
 *     cdef int _pack(self, object o, int nest_limit=DEFAULT_RECURSE_LIMIT) except -1:             # <<<<<<<<<<<<<<
 *         cdef long long llval
 *         cdef unsigned long long ullval
 */

#line 102 "msgpack/_packer.pyx"
  __pyx_k_9 = __pyx_v_7msgpack_7_packer_DEFAULT_RECURSE_LIMIT;

  /* "msgpack/_packer.pyx":248
 * 
 * 
 * def pack(object o, object stream, default=None, encoding='utf-8', unicode_errors='strict'):             # <<<<<<<<<<<<<<
 *     """
 *     pack an object `o` and write it to stream)."""
 */

#line 248 "msgpack/_packer.pyx"
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7msgpack_7_packer_1pack, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 248 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 248 "msgpack/_packer.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__pack, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 248 "msgpack/_packer.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msgpack/_packer.pyx":254
 *     stream.write(packer.pack(o))
 * 
 * def packb(object o, default=None, encoding='utf-8', unicode_errors='strict', use_single_float=False):             # <<<<<<<<<<<<<<
 *     """
 *     pack o and return packed bytes."""
 */

#line 254 "msgpack/_packer.pyx"
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 254 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 254 "msgpack/_packer.pyx"
  __pyx_k_15 = __pyx_t_2;

#line 254 "msgpack/_packer.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 254 "msgpack/_packer.pyx"
  __pyx_t_2 = 0;

#line 254 "msgpack/_packer.pyx"
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7msgpack_7_packer_3packb, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 254 "msgpack/_packer.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 254 "msgpack/_packer.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__packb, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 254 "msgpack/_packer.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msgpack/_packer.pyx":1
 * # coding: utf-8             # <<<<<<<<<<<<<<
 * #cython: embedsignature=True
 * 
 */

#line 1 "msgpack/_packer.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "msgpack/_packer.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 1 "msgpack/_packer.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "msgpack/_packer.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 1 "msgpack/_packer.pyx"
  goto __pyx_L0;

#line 1 "msgpack/_packer.pyx"
  __pyx_L1_error:;

#line 1 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "msgpack/_packer.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1 "msgpack/_packer.pyx"
  if (__pyx_m) {

#line 1 "msgpack/_packer.pyx"
    __Pyx_AddTraceback("init msgpack._packer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "msgpack/_packer.pyx"
    Py_DECREF(__pyx_m); __pyx_m = 0;

#line 1 "msgpack/_packer.pyx"
  } else if (!PyErr_Occurred()) {

#line 1 "msgpack/_packer.pyx"
    PyErr_SetString(PyExc_ImportError, "init msgpack._packer");

#line 1 "msgpack/_packer.pyx"
  }

#line 1 "msgpack/_packer.pyx"
  __pyx_L0:;

#line 1 "msgpack/_packer.pyx"
  __Pyx_RefNannyFinishContext();

#line 1 "msgpack/_packer.pyx"
  #if PY_MAJOR_VERSION < 3

#line 1 "msgpack/_packer.pyx"
  return;

#line 1 "msgpack/_packer.pyx"
  #else

#line 1 "msgpack/_packer.pyx"
  return __pyx_m;

#line 1 "msgpack/_packer.pyx"
  #endif

#line 1 "msgpack/_packer.pyx"
}

#line 1 "cython_utility"

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *args;
        if (!value)
            args = PyTuple_New(0);
        else if (PyTuple_Check(value)) {
            Py_INCREF(value);
            args = value;
        }
        else
            args = PyTuple_Pack(1, value);
        if (!args)
            goto bad;
        owned_instance = PyEval_CallObject(type, args);
        Py_DECREF(args);
        if (!owned_instance)
            goto bad;
        value = owned_instance;
        if (!PyExceptionInstance_Check(value)) {
            PyErr_Format(PyExc_TypeError,
                         "calling %R should have returned an instance of "
                         "BaseException, not %R",
                         type, Py_TYPE(value));
            goto bad;
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause && cause != Py_None) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = PyObject_CallMethodObjArgs(iterable, method_name, NULL);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* iter_obj, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import = 0;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE void __Pyx_RaiseImportError(PyObject *name) {
#if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_ImportError, "cannot import name %.230s",
                 PyString_AsString(name));
#else
    PyErr_Format(PyExc_ImportError, "cannot import name %S", name);
#endif
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
